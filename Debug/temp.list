
temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004514  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080046a8  080046a8  000146a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f0  080047f0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080047f0  080047f0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047f0  080047f0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f0  080047f0  000147f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080047f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000254  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c0  200002c0  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e22f  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e5e  00000000  00000000  0002e30e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c68  00000000  00000000  00030170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009b5  00000000  00000000  00030dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002108e  00000000  00000000  0003178d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011304  00000000  00000000  0005281b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca182  00000000  00000000  00063b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000036b0  00000000  00000000  0012dca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00131354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000006c 	.word	0x2000006c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004690 	.word	0x08004690

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000070 	.word	0x20000070
 80001d0:	08004690 	.word	0x08004690

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	int done=1;
 80001ee:	2301      	movs	r3, #1
 80001f0:	607b      	str	r3, [r7, #4]
	while(done)
 80001f2:	e1b1      	b.n	8000558 <Get_Key+0x370>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 80001f4:	2201      	movs	r2, #1
 80001f6:	2180      	movs	r1, #128	; 0x80
 80001f8:	48c0      	ldr	r0, [pc, #768]	; (80004fc <Get_Key+0x314>)
 80001fa:	f001 fcf1 	bl	8001be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80001fe:	2200      	movs	r2, #0
 8000200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000208:	f001 fcea 	bl	8001be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800020c:	2200      	movs	r2, #0
 800020e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000216:	f001 fce3 	bl	8001be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 800021a:	2200      	movs	r2, #0
 800021c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000220:	48b7      	ldr	r0, [pc, #732]	; (8000500 <Get_Key+0x318>)
 8000222:	f001 fcdd 	bl	8001be0 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000226:	2120      	movs	r1, #32
 8000228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022c:	f001 fcc0 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d00c      	beq.n	8000250 <Get_Key+0x68>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000236:	bf00      	nop
 8000238:	2120      	movs	r1, #32
 800023a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023e:	f001 fcb7 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d1f7      	bne.n	8000238 <Get_Key+0x50>
		key='1';
 8000248:	4bae      	ldr	r3, [pc, #696]	; (8000504 <Get_Key+0x31c>)
 800024a:	2231      	movs	r2, #49	; 0x31
 800024c:	701a      	strb	r2, [r3, #0]
		break;
 800024e:	e187      	b.n	8000560 <Get_Key+0x378>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000250:	2140      	movs	r1, #64	; 0x40
 8000252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000256:	f001 fcab 	bl	8001bb0 <HAL_GPIO_ReadPin>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d00c      	beq.n	800027a <Get_Key+0x92>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000260:	bf00      	nop
 8000262:	2140      	movs	r1, #64	; 0x40
 8000264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000268:	f001 fca2 	bl	8001bb0 <HAL_GPIO_ReadPin>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d1f7      	bne.n	8000262 <Get_Key+0x7a>
		key='4';
 8000272:	4ba4      	ldr	r3, [pc, #656]	; (8000504 <Get_Key+0x31c>)
 8000274:	2234      	movs	r2, #52	; 0x34
 8000276:	701a      	strb	r2, [r3, #0]
		break;
 8000278:	e172      	b.n	8000560 <Get_Key+0x378>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800027a:	2180      	movs	r1, #128	; 0x80
 800027c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000280:	f001 fc96 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d00c      	beq.n	80002a4 <Get_Key+0xbc>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800028a:	bf00      	nop
 800028c:	2180      	movs	r1, #128	; 0x80
 800028e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000292:	f001 fc8d 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d1f7      	bne.n	800028c <Get_Key+0xa4>
		key='7';
 800029c:	4b99      	ldr	r3, [pc, #612]	; (8000504 <Get_Key+0x31c>)
 800029e:	2237      	movs	r2, #55	; 0x37
 80002a0:	701a      	strb	r2, [r3, #0]
		break;
 80002a2:	e15d      	b.n	8000560 <Get_Key+0x378>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80002a4:	2140      	movs	r1, #64	; 0x40
 80002a6:	4896      	ldr	r0, [pc, #600]	; (8000500 <Get_Key+0x318>)
 80002a8:	f001 fc82 	bl	8001bb0 <HAL_GPIO_ReadPin>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d00b      	beq.n	80002ca <Get_Key+0xe2>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80002b2:	bf00      	nop
 80002b4:	2140      	movs	r1, #64	; 0x40
 80002b6:	4892      	ldr	r0, [pc, #584]	; (8000500 <Get_Key+0x318>)
 80002b8:	f001 fc7a 	bl	8001bb0 <HAL_GPIO_ReadPin>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d1f8      	bne.n	80002b4 <Get_Key+0xcc>
		key='*';
 80002c2:	4b90      	ldr	r3, [pc, #576]	; (8000504 <Get_Key+0x31c>)
 80002c4:	222a      	movs	r2, #42	; 0x2a
 80002c6:	701a      	strb	r2, [r3, #0]
		break;
 80002c8:	e14a      	b.n	8000560 <Get_Key+0x378>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 80002ca:	2200      	movs	r2, #0
 80002cc:	2180      	movs	r1, #128	; 0x80
 80002ce:	488b      	ldr	r0, [pc, #556]	; (80004fc <Get_Key+0x314>)
 80002d0:	f001 fc86 	bl	8001be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 80002d4:	2201      	movs	r2, #1
 80002d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002de:	f001 fc7f 	bl	8001be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ec:	f001 fc78 	bl	8001be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80002f0:	2200      	movs	r2, #0
 80002f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f6:	4882      	ldr	r0, [pc, #520]	; (8000500 <Get_Key+0x318>)
 80002f8:	f001 fc72 	bl	8001be0 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80002fc:	2120      	movs	r1, #32
 80002fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000302:	f001 fc55 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d00c      	beq.n	8000326 <Get_Key+0x13e>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800030c:	bf00      	nop
 800030e:	2120      	movs	r1, #32
 8000310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000314:	f001 fc4c 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d1f7      	bne.n	800030e <Get_Key+0x126>
		key='2';
 800031e:	4b79      	ldr	r3, [pc, #484]	; (8000504 <Get_Key+0x31c>)
 8000320:	2232      	movs	r2, #50	; 0x32
 8000322:	701a      	strb	r2, [r3, #0]
		break;
 8000324:	e11c      	b.n	8000560 <Get_Key+0x378>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000326:	2140      	movs	r1, #64	; 0x40
 8000328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032c:	f001 fc40 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d00c      	beq.n	8000350 <Get_Key+0x168>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000336:	bf00      	nop
 8000338:	2140      	movs	r1, #64	; 0x40
 800033a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033e:	f001 fc37 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d1f7      	bne.n	8000338 <Get_Key+0x150>
		key='5';
 8000348:	4b6e      	ldr	r3, [pc, #440]	; (8000504 <Get_Key+0x31c>)
 800034a:	2235      	movs	r2, #53	; 0x35
 800034c:	701a      	strb	r2, [r3, #0]
		break;
 800034e:	e107      	b.n	8000560 <Get_Key+0x378>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000356:	f001 fc2b 	bl	8001bb0 <HAL_GPIO_ReadPin>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d00c      	beq.n	800037a <Get_Key+0x192>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000360:	bf00      	nop
 8000362:	2180      	movs	r1, #128	; 0x80
 8000364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000368:	f001 fc22 	bl	8001bb0 <HAL_GPIO_ReadPin>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d1f7      	bne.n	8000362 <Get_Key+0x17a>
		key='8';
 8000372:	4b64      	ldr	r3, [pc, #400]	; (8000504 <Get_Key+0x31c>)
 8000374:	2238      	movs	r2, #56	; 0x38
 8000376:	701a      	strb	r2, [r3, #0]
		break;
 8000378:	e0f2      	b.n	8000560 <Get_Key+0x378>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	4860      	ldr	r0, [pc, #384]	; (8000500 <Get_Key+0x318>)
 800037e:	f001 fc17 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d00b      	beq.n	80003a0 <Get_Key+0x1b8>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000388:	bf00      	nop
 800038a:	2140      	movs	r1, #64	; 0x40
 800038c:	485c      	ldr	r0, [pc, #368]	; (8000500 <Get_Key+0x318>)
 800038e:	f001 fc0f 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d1f8      	bne.n	800038a <Get_Key+0x1a2>
		key='0';
 8000398:	4b5a      	ldr	r3, [pc, #360]	; (8000504 <Get_Key+0x31c>)
 800039a:	2230      	movs	r2, #48	; 0x30
 800039c:	701a      	strb	r2, [r3, #0]
		break;
 800039e:	e0df      	b.n	8000560 <Get_Key+0x378>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80003a0:	2200      	movs	r2, #0
 80003a2:	2180      	movs	r1, #128	; 0x80
 80003a4:	4855      	ldr	r0, [pc, #340]	; (80004fc <Get_Key+0x314>)
 80003a6:	f001 fc1b 	bl	8001be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80003aa:	2200      	movs	r2, #0
 80003ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b4:	f001 fc14 	bl	8001be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c2:	f001 fc0d 	bl	8001be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80003c6:	2200      	movs	r2, #0
 80003c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003cc:	484c      	ldr	r0, [pc, #304]	; (8000500 <Get_Key+0x318>)
 80003ce:	f001 fc07 	bl	8001be0 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80003d2:	2120      	movs	r1, #32
 80003d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d8:	f001 fbea 	bl	8001bb0 <HAL_GPIO_ReadPin>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d00c      	beq.n	80003fc <Get_Key+0x214>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80003e2:	bf00      	nop
 80003e4:	2120      	movs	r1, #32
 80003e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ea:	f001 fbe1 	bl	8001bb0 <HAL_GPIO_ReadPin>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d1f7      	bne.n	80003e4 <Get_Key+0x1fc>
		key='3';
 80003f4:	4b43      	ldr	r3, [pc, #268]	; (8000504 <Get_Key+0x31c>)
 80003f6:	2233      	movs	r2, #51	; 0x33
 80003f8:	701a      	strb	r2, [r3, #0]
		break;
 80003fa:	e0b1      	b.n	8000560 <Get_Key+0x378>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80003fc:	2140      	movs	r1, #64	; 0x40
 80003fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000402:	f001 fbd5 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d00c      	beq.n	8000426 <Get_Key+0x23e>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800040c:	bf00      	nop
 800040e:	2140      	movs	r1, #64	; 0x40
 8000410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000414:	f001 fbcc 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d1f7      	bne.n	800040e <Get_Key+0x226>
		key='6';
 800041e:	4b39      	ldr	r3, [pc, #228]	; (8000504 <Get_Key+0x31c>)
 8000420:	2236      	movs	r2, #54	; 0x36
 8000422:	701a      	strb	r2, [r3, #0]
		break;
 8000424:	e09c      	b.n	8000560 <Get_Key+0x378>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000426:	2180      	movs	r1, #128	; 0x80
 8000428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042c:	f001 fbc0 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d00c      	beq.n	8000450 <Get_Key+0x268>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000436:	bf00      	nop
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800043e:	f001 fbb7 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d1f7      	bne.n	8000438 <Get_Key+0x250>
		key='9';
 8000448:	4b2e      	ldr	r3, [pc, #184]	; (8000504 <Get_Key+0x31c>)
 800044a:	2239      	movs	r2, #57	; 0x39
 800044c:	701a      	strb	r2, [r3, #0]
		break;
 800044e:	e087      	b.n	8000560 <Get_Key+0x378>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	482b      	ldr	r0, [pc, #172]	; (8000500 <Get_Key+0x318>)
 8000454:	f001 fbac 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d00b      	beq.n	8000476 <Get_Key+0x28e>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800045e:	bf00      	nop
 8000460:	2140      	movs	r1, #64	; 0x40
 8000462:	4827      	ldr	r0, [pc, #156]	; (8000500 <Get_Key+0x318>)
 8000464:	f001 fba4 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d1f8      	bne.n	8000460 <Get_Key+0x278>
		key='#';
 800046e:	4b25      	ldr	r3, [pc, #148]	; (8000504 <Get_Key+0x31c>)
 8000470:	2223      	movs	r2, #35	; 0x23
 8000472:	701a      	strb	r2, [r3, #0]
		break;
 8000474:	e074      	b.n	8000560 <Get_Key+0x378>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000476:	2200      	movs	r2, #0
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	4820      	ldr	r0, [pc, #128]	; (80004fc <Get_Key+0x314>)
 800047c:	f001 fbb0 	bl	8001be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048a:	f001 fba9 	bl	8001be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800048e:	2200      	movs	r2, #0
 8000490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000498:	f001 fba2 	bl	8001be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a2:	4817      	ldr	r0, [pc, #92]	; (8000500 <Get_Key+0x318>)
 80004a4:	f001 fb9c 	bl	8001be0 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80004a8:	2120      	movs	r1, #32
 80004aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ae:	f001 fb7f 	bl	8001bb0 <HAL_GPIO_ReadPin>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d00c      	beq.n	80004d2 <Get_Key+0x2ea>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80004b8:	bf00      	nop
 80004ba:	2120      	movs	r1, #32
 80004bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c0:	f001 fb76 	bl	8001bb0 <HAL_GPIO_ReadPin>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d1f7      	bne.n	80004ba <Get_Key+0x2d2>
		key='A';
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <Get_Key+0x31c>)
 80004cc:	2241      	movs	r2, #65	; 0x41
 80004ce:	701a      	strb	r2, [r3, #0]
		break;
 80004d0:	e046      	b.n	8000560 <Get_Key+0x378>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80004d2:	2140      	movs	r1, #64	; 0x40
 80004d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d8:	f001 fb6a 	bl	8001bb0 <HAL_GPIO_ReadPin>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d012      	beq.n	8000508 <Get_Key+0x320>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80004e2:	bf00      	nop
 80004e4:	2140      	movs	r1, #64	; 0x40
 80004e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ea:	f001 fb61 	bl	8001bb0 <HAL_GPIO_ReadPin>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d1f7      	bne.n	80004e4 <Get_Key+0x2fc>
		key='B';
 80004f4:	4b03      	ldr	r3, [pc, #12]	; (8000504 <Get_Key+0x31c>)
 80004f6:	2242      	movs	r2, #66	; 0x42
 80004f8:	701a      	strb	r2, [r3, #0]
		break;
 80004fa:	e031      	b.n	8000560 <Get_Key+0x378>
 80004fc:	48000800 	.word	0x48000800
 8000500:	48000400 	.word	0x48000400
 8000504:	20000088 	.word	0x20000088
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050e:	f001 fb4f 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d00c      	beq.n	8000532 <Get_Key+0x34a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000518:	bf00      	nop
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f001 fb46 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d1f7      	bne.n	800051a <Get_Key+0x332>
		key='C';
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <Get_Key+0x390>)
 800052c:	2243      	movs	r2, #67	; 0x43
 800052e:	701a      	strb	r2, [r3, #0]
		break;
 8000530:	e016      	b.n	8000560 <Get_Key+0x378>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000532:	2140      	movs	r1, #64	; 0x40
 8000534:	4811      	ldr	r0, [pc, #68]	; (800057c <Get_Key+0x394>)
 8000536:	f001 fb3b 	bl	8001bb0 <HAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d00b      	beq.n	8000558 <Get_Key+0x370>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000540:	bf00      	nop
 8000542:	2140      	movs	r1, #64	; 0x40
 8000544:	480d      	ldr	r0, [pc, #52]	; (800057c <Get_Key+0x394>)
 8000546:	f001 fb33 	bl	8001bb0 <HAL_GPIO_ReadPin>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d1f8      	bne.n	8000542 <Get_Key+0x35a>
		key='D';
 8000550:	4b09      	ldr	r3, [pc, #36]	; (8000578 <Get_Key+0x390>)
 8000552:	2244      	movs	r2, #68	; 0x44
 8000554:	701a      	strb	r2, [r3, #0]
		break;
 8000556:	e003      	b.n	8000560 <Get_Key+0x378>
	while(done)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	f47f ae4a 	bne.w	80001f4 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000560:	2120      	movs	r1, #32
 8000562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000566:	f001 fb53 	bl	8001c10 <HAL_GPIO_TogglePin>
	return(key);
 800056a:	4b03      	ldr	r3, [pc, #12]	; (8000578 <Get_Key+0x390>)
 800056c:	781b      	ldrb	r3, [r3, #0]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000088 	.word	0x20000088
 800057c:	48000400 	.word	0x48000400

08000580 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <delay+0x30>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2200      	movs	r2, #0
 8000590:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000592:	bf00      	nop
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <delay+0x30>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	429a      	cmp	r2, r3
 800059e:	d3f9      	bcc.n	8000594 <delay+0x14>
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	2000008c 	.word	0x2000008c

080005b4 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	6039      	str	r1, [r7, #0]
 80005be:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	461a      	mov	r2, r3
 80005c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ca:	4822      	ldr	r0, [pc, #136]	; (8000654 <send_to_lcd+0xa0>)
 80005cc:	f001 fb08 	bl	8001be0 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	08db      	lsrs	r3, r3, #3
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e2:	481c      	ldr	r0, [pc, #112]	; (8000654 <send_to_lcd+0xa0>)
 80005e4:	f001 fafc 	bl	8001be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	089b      	lsrs	r3, r3, #2
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	461a      	mov	r2, r3
 80005f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005fa:	4816      	ldr	r0, [pc, #88]	; (8000654 <send_to_lcd+0xa0>)
 80005fc:	f001 faf0 	bl	8001be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	085b      	lsrs	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	461a      	mov	r2, r3
 800060e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000612:	4810      	ldr	r0, [pc, #64]	; (8000654 <send_to_lcd+0xa0>)
 8000614:	f001 fae4 	bl	8001be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	b2db      	uxtb	r3, r3
 8000620:	461a      	mov	r2, r3
 8000622:	2102      	movs	r1, #2
 8000624:	480b      	ldr	r0, [pc, #44]	; (8000654 <send_to_lcd+0xa0>)
 8000626:	f001 fadb 	bl	8001be0 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 800062a:	2201      	movs	r2, #1
 800062c:	2104      	movs	r1, #4
 800062e:	4809      	ldr	r0, [pc, #36]	; (8000654 <send_to_lcd+0xa0>)
 8000630:	f001 fad6 	bl	8001be0 <HAL_GPIO_WritePin>
	delay (20);
 8000634:	2014      	movs	r0, #20
 8000636:	f7ff ffa3 	bl	8000580 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2104      	movs	r1, #4
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <send_to_lcd+0xa0>)
 8000640:	f001 face 	bl	8001be0 <HAL_GPIO_WritePin>
	delay (20);
 8000644:	2014      	movs	r0, #20
 8000646:	f7ff ff9b 	bl	8000580 <delay>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	48000400 	.word	0x48000400

08000658 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	091b      	lsrs	r3, r3, #4
 8000666:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ffa1 	bl	80005b4 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 030f 	and.w	r3, r3, #15
 8000678:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ff98 	bl	80005b4 <send_to_lcd>
}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <lcd_send_data>:

void lcd_send_data (char data)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	091b      	lsrs	r3, r3, #4
 800069a:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	2101      	movs	r1, #1
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff87 	bl	80005b4 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
 80006b0:	2101      	movs	r1, #1
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff7e 	bl	80005b4 <send_to_lcd>
}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <lcd_clear>:

void lcd_clear (void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff ffc7 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(2);
 80006ca:	2002      	movs	r0, #2
 80006cc:	f000 ffdc 	bl	8001688 <HAL_Delay>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
    switch (row)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	d81f      	bhi.n	8000724 <lcd_put_cur+0x50>
 80006e4:	a201      	add	r2, pc, #4	; (adr r2, 80006ec <lcd_put_cur+0x18>)
 80006e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ea:	bf00      	nop
 80006ec:	080006fd 	.word	0x080006fd
 80006f0:	08000707 	.word	0x08000707
 80006f4:	08000711 	.word	0x08000711
 80006f8:	0800071b 	.word	0x0800071b
    {
        case 0:
            col |= 0x80;
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000702:	603b      	str	r3, [r7, #0]
            break;
 8000704:	e00e      	b.n	8000724 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800070c:	603b      	str	r3, [r7, #0]
            break;
 800070e:	e009      	b.n	8000724 <lcd_put_cur+0x50>
		case 2:
            col |= 0x94;
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 8000716:	603b      	str	r3, [r7, #0]
            break;
 8000718:	e004      	b.n	8000724 <lcd_put_cur+0x50>
		case 3:
            col |= 0xD4;
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	f043 03d4 	orr.w	r3, r3, #212	; 0xd4
 8000720:	603b      	str	r3, [r7, #0]
            break;
 8000722:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff95 	bl	8000658 <lcd_send_cmd>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop

08000738 <lcd_init>:


void lcd_init (void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800073c:	2032      	movs	r0, #50	; 0x32
 800073e:	f000 ffa3 	bl	8001688 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000742:	2030      	movs	r0, #48	; 0x30
 8000744:	f7ff ff88 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000748:	2005      	movs	r0, #5
 800074a:	f000 ff9d 	bl	8001688 <HAL_Delay>
	lcd_send_cmd (0x30);
 800074e:	2030      	movs	r0, #48	; 0x30
 8000750:	f7ff ff82 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000754:	2001      	movs	r0, #1
 8000756:	f000 ff97 	bl	8001688 <HAL_Delay>
	lcd_send_cmd (0x30);
 800075a:	2030      	movs	r0, #48	; 0x30
 800075c:	f7ff ff7c 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(10);
 8000760:	200a      	movs	r0, #10
 8000762:	f000 ff91 	bl	8001688 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000766:	2020      	movs	r0, #32
 8000768:	f7ff ff76 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(10);
 800076c:	200a      	movs	r0, #10
 800076e:	f000 ff8b 	bl	8001688 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000772:	2028      	movs	r0, #40	; 0x28
 8000774:	f7ff ff70 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f000 ff85 	bl	8001688 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800077e:	2008      	movs	r0, #8
 8000780:	f7ff ff6a 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(1);
 8000784:	2001      	movs	r0, #1
 8000786:	f000 ff7f 	bl	8001688 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff64 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f000 ff79 	bl	8001688 <HAL_Delay>
	HAL_Delay(1);
 8000796:	2001      	movs	r0, #1
 8000798:	f000 ff76 	bl	8001688 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800079c:	2006      	movs	r0, #6
 800079e:	f7ff ff5b 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(1);
 80007a2:	2001      	movs	r0, #1
 80007a4:	f000 ff70 	bl	8001688 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80007a8:	200c      	movs	r0, #12
 80007aa:	f7ff ff55 	bl	8000658 <lcd_send_cmd>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80007ba:	e006      	b.n	80007ca <lcd_send_string+0x18>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff61 	bl	800068c <lcd_send_data>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1f4      	bne.n	80007bc <lcd_send_string+0xa>
}
 80007d2:	bf00      	nop
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <intTostr>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char* intTostr(int num)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    char* str=(char*)malloc(3*sizeof(char));
 80007e4:	2003      	movs	r0, #3
 80007e6:	f003 fe5b 	bl	80044a0 <malloc>
 80007ea:	4603      	mov	r3, r0
 80007ec:	617b      	str	r3, [r7, #20]
    if (num>99)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b63      	cmp	r3, #99	; 0x63
 80007f2:	dd46      	ble.n	8000882 <intTostr+0xa6>
        {
            char i1=48+((num%100)%10);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a3f      	ldr	r2, [pc, #252]	; (80008f4 <intTostr+0x118>)
 80007f8:	fb82 1203 	smull	r1, r2, r2, r3
 80007fc:	1151      	asrs	r1, r2, #5
 80007fe:	17da      	asrs	r2, r3, #31
 8000800:	1a8a      	subs	r2, r1, r2
 8000802:	2164      	movs	r1, #100	; 0x64
 8000804:	fb01 f202 	mul.w	r2, r1, r2
 8000808:	1a9a      	subs	r2, r3, r2
 800080a:	4b3b      	ldr	r3, [pc, #236]	; (80008f8 <intTostr+0x11c>)
 800080c:	fb83 1302 	smull	r1, r3, r3, r2
 8000810:	1099      	asrs	r1, r3, #2
 8000812:	17d3      	asrs	r3, r2, #31
 8000814:	1ac9      	subs	r1, r1, r3
 8000816:	460b      	mov	r3, r1
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	440b      	add	r3, r1
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	1ad1      	subs	r1, r2, r3
 8000820:	b2cb      	uxtb	r3, r1
 8000822:	3330      	adds	r3, #48	; 0x30
 8000824:	743b      	strb	r3, [r7, #16]
            char i2=48+((num%100)/10);
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	4b32      	ldr	r3, [pc, #200]	; (80008f4 <intTostr+0x118>)
 800082a:	fb83 1302 	smull	r1, r3, r3, r2
 800082e:	1159      	asrs	r1, r3, #5
 8000830:	17d3      	asrs	r3, r2, #31
 8000832:	1acb      	subs	r3, r1, r3
 8000834:	2164      	movs	r1, #100	; 0x64
 8000836:	fb01 f303 	mul.w	r3, r1, r3
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	4a2e      	ldr	r2, [pc, #184]	; (80008f8 <intTostr+0x11c>)
 800083e:	fb82 1203 	smull	r1, r2, r2, r3
 8000842:	1092      	asrs	r2, r2, #2
 8000844:	17db      	asrs	r3, r3, #31
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	b2db      	uxtb	r3, r3
 800084a:	3330      	adds	r3, #48	; 0x30
 800084c:	73fb      	strb	r3, [r7, #15]
            char i3=48+(num/100);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <intTostr+0x118>)
 8000852:	fb82 1203 	smull	r1, r2, r2, r3
 8000856:	1152      	asrs	r2, r2, #5
 8000858:	17db      	asrs	r3, r3, #31
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	b2db      	uxtb	r3, r3
 800085e:	3330      	adds	r3, #48	; 0x30
 8000860:	73bb      	strb	r3, [r7, #14]
            str[0]=i3;
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	7bba      	ldrb	r2, [r7, #14]
 8000866:	701a      	strb	r2, [r3, #0]
            str[1]=i2;
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	7bfa      	ldrb	r2, [r7, #15]
 800086e:	701a      	strb	r2, [r3, #0]
            str[2]=i1;
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	3302      	adds	r3, #2
 8000874:	7c3a      	ldrb	r2, [r7, #16]
 8000876:	701a      	strb	r2, [r3, #0]
            str[3]='\0';
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	3303      	adds	r3, #3
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	e032      	b.n	80008e8 <intTostr+0x10c>
        }
        else if (num>9)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b09      	cmp	r3, #9
 8000886:	dd24      	ble.n	80008d2 <intTostr+0xf6>
        {
            char i1=48+(num%10);
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <intTostr+0x11c>)
 800088c:	fb83 1302 	smull	r1, r3, r3, r2
 8000890:	1099      	asrs	r1, r3, #2
 8000892:	17d3      	asrs	r3, r2, #31
 8000894:	1ac9      	subs	r1, r1, r3
 8000896:	460b      	mov	r3, r1
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	440b      	add	r3, r1
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	1ad1      	subs	r1, r2, r3
 80008a0:	b2cb      	uxtb	r3, r1
 80008a2:	3330      	adds	r3, #48	; 0x30
 80008a4:	74bb      	strb	r3, [r7, #18]
            char i2=48+(num/10);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a13      	ldr	r2, [pc, #76]	; (80008f8 <intTostr+0x11c>)
 80008aa:	fb82 1203 	smull	r1, r2, r2, r3
 80008ae:	1092      	asrs	r2, r2, #2
 80008b0:	17db      	asrs	r3, r3, #31
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	3330      	adds	r3, #48	; 0x30
 80008b8:	747b      	strb	r3, [r7, #17]
            str[0]=i2;
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	7c7a      	ldrb	r2, [r7, #17]
 80008be:	701a      	strb	r2, [r3, #0]
            str[1]=i1;
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	3301      	adds	r3, #1
 80008c4:	7cba      	ldrb	r2, [r7, #18]
 80008c6:	701a      	strb	r2, [r3, #0]
            str[2]='\0';
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	3302      	adds	r3, #2
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
 80008d0:	e00a      	b.n	80008e8 <intTostr+0x10c>
        }
        else
        {
            char i=48+num;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	3330      	adds	r3, #48	; 0x30
 80008d8:	74fb      	strb	r3, [r7, #19]
            str[0]=i;
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	7cfa      	ldrb	r2, [r7, #19]
 80008de:	701a      	strb	r2, [r3, #0]
            str[1]='\0';
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	3301      	adds	r3, #1
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
        }
    return str;
 80008e8:	697b      	ldr	r3, [r7, #20]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	51eb851f 	.word	0x51eb851f
 80008f8:	66666667 	.word	0x66666667

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000902:	f000 fe5b 	bl	80015bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000906:	f000 fb95 	bl	8001034 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090a:	f000 fc79 	bl	8001200 <MX_GPIO_Init>
  MX_TIM1_Init();
 800090e:	f000 fbf3 	bl	80010f8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000912:	f000 fc45 	bl	80011a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000916:	48b0      	ldr	r0, [pc, #704]	; (8000bd8 <main+0x2dc>)
 8000918:	f002 fe94 	bl	8003644 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);
 800091c:	2200      	movs	r2, #0
 800091e:	2110      	movs	r1, #16
 8000920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000924:	f001 f95c 	bl	8001be0 <HAL_GPIO_WritePin>
  memset(user, '\0', sizeof(user));
 8000928:	2206      	movs	r2, #6
 800092a:	2100      	movs	r1, #0
 800092c:	48ab      	ldr	r0, [pc, #684]	; (8000bdc <main+0x2e0>)
 800092e:	f003 fe6b 	bl	8004608 <memset>
  lcd_init();
 8000932:	f7ff ff01 	bl	8000738 <lcd_init>
  lcd_put_cur(0,0);
 8000936:	2100      	movs	r1, #0
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff fecb 	bl	80006d4 <lcd_put_cur>
  lcd_send_string("Enter Pin");
 800093e:	48a8      	ldr	r0, [pc, #672]	; (8000be0 <main+0x2e4>)
 8000940:	f7ff ff37 	bl	80007b2 <lcd_send_string>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
key=Get_Key();
 8000944:	f7ff fc50 	bl	80001e8 <Get_Key>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	4ba5      	ldr	r3, [pc, #660]	; (8000be4 <main+0x2e8>)
 800094e:	701a      	strb	r2, [r3, #0]
HAL_Delay(250);
 8000950:	20fa      	movs	r0, #250	; 0xfa
 8000952:	f000 fe99 	bl	8001688 <HAL_Delay>
while(key!='D')
 8000956:	e044      	b.n	80009e2 <main+0xe6>
{
	if (key!='*'){
 8000958:	4ba2      	ldr	r3, [pc, #648]	; (8000be4 <main+0x2e8>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b2a      	cmp	r3, #42	; 0x2a
 800095e:	d017      	beq.n	8000990 <main+0x94>
	user[i]=key;
 8000960:	4ba1      	ldr	r3, [pc, #644]	; (8000be8 <main+0x2ec>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a9f      	ldr	r2, [pc, #636]	; (8000be4 <main+0x2e8>)
 8000966:	7811      	ldrb	r1, [r2, #0]
 8000968:	4a9c      	ldr	r2, [pc, #624]	; (8000bdc <main+0x2e0>)
 800096a:	54d1      	strb	r1, [r2, r3]
	lcd_put_cur(1,i);
 800096c:	4b9e      	ldr	r3, [pc, #632]	; (8000be8 <main+0x2ec>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	2001      	movs	r0, #1
 8000974:	f7ff feae 	bl	80006d4 <lcd_put_cur>
	lcd_send_string(&key);
 8000978:	489a      	ldr	r0, [pc, #616]	; (8000be4 <main+0x2e8>)
 800097a:	f7ff ff1a 	bl	80007b2 <lcd_send_string>
	key=Get_Key();
 800097e:	f7ff fc33 	bl	80001e8 <Get_Key>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	4b97      	ldr	r3, [pc, #604]	; (8000be4 <main+0x2e8>)
 8000988:	701a      	strb	r2, [r3, #0]
	HAL_Delay(250);
 800098a:	20fa      	movs	r0, #250	; 0xfa
 800098c:	f000 fe7c 	bl	8001688 <HAL_Delay>
	}
	if(key=='*')
 8000990:	4b94      	ldr	r3, [pc, #592]	; (8000be4 <main+0x2e8>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b2a      	cmp	r3, #42	; 0x2a
 8000996:	d11b      	bne.n	80009d0 <main+0xd4>
	{
		lcd_put_cur(1,i);
 8000998:	4b93      	ldr	r3, [pc, #588]	; (8000be8 <main+0x2ec>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff fe98 	bl	80006d4 <lcd_put_cur>
		lcd_send_string(" ");
 80009a4:	4891      	ldr	r0, [pc, #580]	; (8000bec <main+0x2f0>)
 80009a6:	f7ff ff04 	bl	80007b2 <lcd_send_string>
		user[i]='\0';
 80009aa:	4b8f      	ldr	r3, [pc, #572]	; (8000be8 <main+0x2ec>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a8b      	ldr	r2, [pc, #556]	; (8000bdc <main+0x2e0>)
 80009b0:	2100      	movs	r1, #0
 80009b2:	54d1      	strb	r1, [r2, r3]
		key=Get_Key();
 80009b4:	f7ff fc18 	bl	80001e8 <Get_Key>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b89      	ldr	r3, [pc, #548]	; (8000be4 <main+0x2e8>)
 80009be:	701a      	strb	r2, [r3, #0]
		HAL_Delay(250);
 80009c0:	20fa      	movs	r0, #250	; 0xfa
 80009c2:	f000 fe61 	bl	8001688 <HAL_Delay>
		i-=1;
 80009c6:	4b88      	ldr	r3, [pc, #544]	; (8000be8 <main+0x2ec>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	4a86      	ldr	r2, [pc, #536]	; (8000be8 <main+0x2ec>)
 80009ce:	6013      	str	r3, [r2, #0]
	}
	if (key!='*')
 80009d0:	4b84      	ldr	r3, [pc, #528]	; (8000be4 <main+0x2e8>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b2a      	cmp	r3, #42	; 0x2a
 80009d6:	d004      	beq.n	80009e2 <main+0xe6>
	i+=1;
 80009d8:	4b83      	ldr	r3, [pc, #524]	; (8000be8 <main+0x2ec>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	4a82      	ldr	r2, [pc, #520]	; (8000be8 <main+0x2ec>)
 80009e0:	6013      	str	r3, [r2, #0]
while(key!='D')
 80009e2:	4b80      	ldr	r3, [pc, #512]	; (8000be4 <main+0x2e8>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b44      	cmp	r3, #68	; 0x44
 80009e8:	d1b6      	bne.n	8000958 <main+0x5c>
}
if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==0)
 80009ea:	2110      	movs	r1, #16
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f0:	f001 f8de 	bl	8001bb0 <HAL_GPIO_ReadPin>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f040 826c 	bne.w	8000ed4 <main+0x5d8>
{
	if (!strcmp(user,pass))
 80009fc:	497c      	ldr	r1, [pc, #496]	; (8000bf0 <main+0x2f4>)
 80009fe:	4877      	ldr	r0, [pc, #476]	; (8000bdc <main+0x2e0>)
 8000a00:	f7ff fbe8 	bl	80001d4 <strcmp>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d148      	bne.n	8000a9c <main+0x1a0>
	{
		lcd_clear();
 8000a0a:	f7ff fe59 	bl	80006c0 <lcd_clear>
		lcd_put_cur(0,0);
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fe5f 	bl	80006d4 <lcd_put_cur>
		lcd_send_string("Welcome");
 8000a16:	4877      	ldr	r0, [pc, #476]	; (8000bf4 <main+0x2f8>)
 8000a18:	f7ff fecb 	bl	80007b2 <lcd_send_string>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,1);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2110      	movs	r1, #16
 8000a20:	4875      	ldr	r0, [pc, #468]	; (8000bf8 <main+0x2fc>)
 8000a22:	f001 f8dd 	bl	8001be0 <HAL_GPIO_WritePin>
		HAL_Delay(3000);
 8000a26:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a2a:	f000 fe2d 	bl	8001688 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2110      	movs	r1, #16
 8000a32:	4871      	ldr	r0, [pc, #452]	; (8000bf8 <main+0x2fc>)
 8000a34:	f001 f8d4 	bl	8001be0 <HAL_GPIO_WritePin>
		key=Get_Key();
 8000a38:	f7ff fbd6 	bl	80001e8 <Get_Key>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b68      	ldr	r3, [pc, #416]	; (8000be4 <main+0x2e8>)
 8000a42:	701a      	strb	r2, [r3, #0]
		while (key!='D')
 8000a44:	e005      	b.n	8000a52 <main+0x156>
			key=Get_Key();
 8000a46:	f7ff fbcf 	bl	80001e8 <Get_Key>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b65      	ldr	r3, [pc, #404]	; (8000be4 <main+0x2e8>)
 8000a50:	701a      	strb	r2, [r3, #0]
		while (key!='D')
 8000a52:	4b64      	ldr	r3, [pc, #400]	; (8000be4 <main+0x2e8>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b44      	cmp	r3, #68	; 0x44
 8000a58:	d1f5      	bne.n	8000a46 <main+0x14a>
		if (key=='D')
 8000a5a:	4b62      	ldr	r3, [pc, #392]	; (8000be4 <main+0x2e8>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b44      	cmp	r3, #68	; 0x44
 8000a60:	f47f af70 	bne.w	8000944 <main+0x48>
		{
			lcd_clear();
 8000a64:	f7ff fe2c 	bl	80006c0 <lcd_clear>
			lcd_put_cur(0,0);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff fe32 	bl	80006d4 <lcd_put_cur>
			lcd_send_string("Enter PIN");
 8000a70:	4862      	ldr	r0, [pc, #392]	; (8000bfc <main+0x300>)
 8000a72:	f7ff fe9e 	bl	80007b2 <lcd_send_string>
			lcd_put_cur(0,0);
 8000a76:	2100      	movs	r1, #0
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff fe2b 	bl	80006d4 <lcd_put_cur>
			memset(user, '\0', sizeof(user));
 8000a7e:	2206      	movs	r2, #6
 8000a80:	2100      	movs	r1, #0
 8000a82:	4856      	ldr	r0, [pc, #344]	; (8000bdc <main+0x2e0>)
 8000a84:	f003 fdc0 	bl	8004608 <memset>
			i=0;
 8000a88:	4b57      	ldr	r3, [pc, #348]	; (8000be8 <main+0x2ec>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
			trail=0;
 8000a8e:	4b5c      	ldr	r3, [pc, #368]	; (8000c00 <main+0x304>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
			lockdown=0;
 8000a94:	4b5b      	ldr	r3, [pc, #364]	; (8000c04 <main+0x308>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	e753      	b.n	8000944 <main+0x48>
		}
	}
	else
	{
		trail+=1;
 8000a9c:	4b58      	ldr	r3, [pc, #352]	; (8000c00 <main+0x304>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	4a57      	ldr	r2, [pc, #348]	; (8000c00 <main+0x304>)
 8000aa4:	6013      	str	r3, [r2, #0]
		if(trail<3)
 8000aa6:	4b56      	ldr	r3, [pc, #344]	; (8000c00 <main+0x304>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	dc3d      	bgt.n	8000b2a <main+0x22e>
		{
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4855      	ldr	r0, [pc, #340]	; (8000c08 <main+0x30c>)
 8000ab4:	f001 f894 	bl	8001be0 <HAL_GPIO_WritePin>
			lcd_clear();
 8000ab8:	f7ff fe02 	bl	80006c0 <lcd_clear>
			lcd_put_cur(0,0);
 8000abc:	2100      	movs	r1, #0
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff fe08 	bl	80006d4 <lcd_put_cur>
			lcd_send_string("Incorrect Pin");
 8000ac4:	4851      	ldr	r0, [pc, #324]	; (8000c0c <main+0x310>)
 8000ac6:	f7ff fe74 	bl	80007b2 <lcd_send_string>
			lcd_put_cur(1,0);
 8000aca:	2100      	movs	r1, #0
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff fe01 	bl	80006d4 <lcd_put_cur>
			lcd_send_string("Try Again");
 8000ad2:	484f      	ldr	r0, [pc, #316]	; (8000c10 <main+0x314>)
 8000ad4:	f7ff fe6d 	bl	80007b2 <lcd_send_string>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,1);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2120      	movs	r1, #32
 8000adc:	4846      	ldr	r0, [pc, #280]	; (8000bf8 <main+0x2fc>)
 8000ade:	f001 f87f 	bl	8001be0 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000ae2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ae6:	f000 fdcf 	bl	8001688 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2101      	movs	r1, #1
 8000aee:	4846      	ldr	r0, [pc, #280]	; (8000c08 <main+0x30c>)
 8000af0:	f001 f876 	bl	8001be0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2120      	movs	r1, #32
 8000af8:	483f      	ldr	r0, [pc, #252]	; (8000bf8 <main+0x2fc>)
 8000afa:	f001 f871 	bl	8001be0 <HAL_GPIO_WritePin>
			lcd_clear();
 8000afe:	f7ff fddf 	bl	80006c0 <lcd_clear>
			lcd_put_cur(0,0);
 8000b02:	2100      	movs	r1, #0
 8000b04:	2000      	movs	r0, #0
 8000b06:	f7ff fde5 	bl	80006d4 <lcd_put_cur>
			lcd_send_string("Enter PIN");
 8000b0a:	483c      	ldr	r0, [pc, #240]	; (8000bfc <main+0x300>)
 8000b0c:	f7ff fe51 	bl	80007b2 <lcd_send_string>
			lcd_put_cur(0,0);
 8000b10:	2100      	movs	r1, #0
 8000b12:	2000      	movs	r0, #0
 8000b14:	f7ff fdde 	bl	80006d4 <lcd_put_cur>
			memset(user, '\0', sizeof(user));
 8000b18:	2206      	movs	r2, #6
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	482f      	ldr	r0, [pc, #188]	; (8000bdc <main+0x2e0>)
 8000b1e:	f003 fd73 	bl	8004608 <memset>
			i=0;
 8000b22:	4b31      	ldr	r3, [pc, #196]	; (8000be8 <main+0x2ec>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	e70c      	b.n	8000944 <main+0x48>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	4832      	ldr	r0, [pc, #200]	; (8000bf8 <main+0x2fc>)
 8000b30:	f001 f856 	bl	8001be0 <HAL_GPIO_WritePin>
			lockdown+=1;
 8000b34:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <main+0x308>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	4a32      	ldr	r2, [pc, #200]	; (8000c04 <main+0x308>)
 8000b3c:	6013      	str	r3, [r2, #0]
			if (lockdown<3){
 8000b3e:	4b31      	ldr	r3, [pc, #196]	; (8000c04 <main+0x308>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	f300 8097 	bgt.w	8000c76 <main+0x37a>
			lcd_clear();
 8000b48:	f7ff fdba 	bl	80006c0 <lcd_clear>
			lcd_put_cur(0,0);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f7ff fdc0 	bl	80006d4 <lcd_put_cur>
			lcd_send_string("Try Again After:");
 8000b54:	482f      	ldr	r0, [pc, #188]	; (8000c14 <main+0x318>)
 8000b56:	f7ff fe2c 	bl	80007b2 <lcd_send_string>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	482a      	ldr	r0, [pc, #168]	; (8000c08 <main+0x30c>)
 8000b60:	f001 f83e 	bl	8001be0 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000b64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b68:	f000 fd8e 	bl	8001688 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2101      	movs	r1, #1
 8000b70:	4825      	ldr	r0, [pc, #148]	; (8000c08 <main+0x30c>)
 8000b72:	f001 f835 	bl	8001be0 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000b76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b7a:	f000 fd85 	bl	8001688 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2101      	movs	r1, #1
 8000b82:	4821      	ldr	r0, [pc, #132]	; (8000c08 <main+0x30c>)
 8000b84:	f001 f82c 	bl	8001be0 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000b88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b8c:	f000 fd7c 	bl	8001688 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2101      	movs	r1, #1
 8000b94:	481c      	ldr	r0, [pc, #112]	; (8000c08 <main+0x30c>)
 8000b96:	f001 f823 	bl	8001be0 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000b9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b9e:	f000 fd73 	bl	8001688 <HAL_Delay>


			for (int j=10*(lockdown);j>0;j--)
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <main+0x308>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	e040      	b.n	8000c34 <main+0x338>
			{
				lcd_put_cur(1,0);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f7ff fd8d 	bl	80006d4 <lcd_put_cur>
				lcd_send_string(intTostr(j));
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff fe0e 	bl	80007dc <intTostr>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fdf5 	bl	80007b2 <lcd_send_string>
				if(j>9)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b09      	cmp	r3, #9
 8000bcc:	dd24      	ble.n	8000c18 <main+0x31c>
				lcd_put_cur(1,2);
 8000bce:	2102      	movs	r1, #2
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f7ff fd7f 	bl	80006d4 <lcd_put_cur>
 8000bd6:	e023      	b.n	8000c20 <main+0x324>
 8000bd8:	2000008c 	.word	0x2000008c
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	080046a8 	.word	0x080046a8
 8000be4:	20000088 	.word	0x20000088
 8000be8:	20000160 	.word	0x20000160
 8000bec:	080046b4 	.word	0x080046b4
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	080046b8 	.word	0x080046b8
 8000bf8:	48000800 	.word	0x48000800
 8000bfc:	080046c0 	.word	0x080046c0
 8000c00:	20000164 	.word	0x20000164
 8000c04:	20000168 	.word	0x20000168
 8000c08:	48000400 	.word	0x48000400
 8000c0c:	080046cc 	.word	0x080046cc
 8000c10:	080046dc 	.word	0x080046dc
 8000c14:	080046e8 	.word	0x080046e8
				else
				lcd_put_cur(1,1);
 8000c18:	2101      	movs	r1, #1
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f7ff fd5a 	bl	80006d4 <lcd_put_cur>
				lcd_send_string(" Seconds ");
 8000c20:	48c7      	ldr	r0, [pc, #796]	; (8000f40 <main+0x644>)
 8000c22:	f7ff fdc6 	bl	80007b2 <lcd_send_string>
				HAL_Delay(1000);
 8000c26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c2a:	f000 fd2d 	bl	8001688 <HAL_Delay>
			for (int j=10*(lockdown);j>0;j--)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	dcbb      	bgt.n	8000bb2 <main+0x2b6>
			}
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2120      	movs	r1, #32
 8000c3e:	48c1      	ldr	r0, [pc, #772]	; (8000f44 <main+0x648>)
 8000c40:	f000 ffce 	bl	8001be0 <HAL_GPIO_WritePin>
			lcd_clear();
 8000c44:	f7ff fd3c 	bl	80006c0 <lcd_clear>
			lcd_put_cur(0,0);
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff fd42 	bl	80006d4 <lcd_put_cur>
			lcd_send_string("Enter PIN");
 8000c50:	48bd      	ldr	r0, [pc, #756]	; (8000f48 <main+0x64c>)
 8000c52:	f7ff fdae 	bl	80007b2 <lcd_send_string>
			lcd_put_cur(0,0);
 8000c56:	2100      	movs	r1, #0
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff fd3b 	bl	80006d4 <lcd_put_cur>
			memset(user, '\0', sizeof(user));
 8000c5e:	2206      	movs	r2, #6
 8000c60:	2100      	movs	r1, #0
 8000c62:	48ba      	ldr	r0, [pc, #744]	; (8000f4c <main+0x650>)
 8000c64:	f003 fcd0 	bl	8004608 <memset>
			i=0;
 8000c68:	4bb9      	ldr	r3, [pc, #740]	; (8000f50 <main+0x654>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
			trail=0;
 8000c6e:	4bb9      	ldr	r3, [pc, #740]	; (8000f54 <main+0x658>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	e666      	b.n	8000944 <main+0x48>
			}
			else
			{
				lcd_clear();
 8000c76:	f7ff fd23 	bl	80006c0 <lcd_clear>
				lcd_put_cur(0,0);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff fd29 	bl	80006d4 <lcd_put_cur>
				lcd_send_string("Entered");
 8000c82:	48b5      	ldr	r0, [pc, #724]	; (8000f58 <main+0x65c>)
 8000c84:	f7ff fd95 	bl	80007b2 <lcd_send_string>
				lcd_put_cur(1,0);
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f7ff fd22 	bl	80006d4 <lcd_put_cur>
				lcd_send_string("Too Many Wrong Pins");
 8000c90:	48b2      	ldr	r0, [pc, #712]	; (8000f5c <main+0x660>)
 8000c92:	f7ff fd8e 	bl	80007b2 <lcd_send_string>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2101      	movs	r1, #1
 8000c9a:	48b1      	ldr	r0, [pc, #708]	; (8000f60 <main+0x664>)
 8000c9c:	f000 ffa0 	bl	8001be0 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000ca0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca4:	f000 fcf0 	bl	8001688 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2101      	movs	r1, #1
 8000cac:	48ac      	ldr	r0, [pc, #688]	; (8000f60 <main+0x664>)
 8000cae:	f000 ff97 	bl	8001be0 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000cb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cb6:	f000 fce7 	bl	8001688 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	48a8      	ldr	r0, [pc, #672]	; (8000f60 <main+0x664>)
 8000cc0:	f000 ff8e 	bl	8001be0 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000cc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc8:	f000 fcde 	bl	8001688 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2101      	movs	r1, #1
 8000cd0:	48a3      	ldr	r0, [pc, #652]	; (8000f60 <main+0x664>)
 8000cd2:	f000 ff85 	bl	8001be0 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000cd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cda:	f000 fcd5 	bl	8001688 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	489f      	ldr	r0, [pc, #636]	; (8000f60 <main+0x664>)
 8000ce4:	f000 ff7c 	bl	8001be0 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000ce8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cec:	f000 fccc 	bl	8001688 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	489a      	ldr	r0, [pc, #616]	; (8000f60 <main+0x664>)
 8000cf6:	f000 ff73 	bl	8001be0 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000cfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cfe:	f000 fcc3 	bl	8001688 <HAL_Delay>
				HAL_Delay(2000);
 8000d02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d06:	f000 fcbf 	bl	8001688 <HAL_Delay>
				lcd_clear();
 8000d0a:	f7ff fcd9 	bl	80006c0 <lcd_clear>
				lcd_put_cur(0,0);
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff fcdf 	bl	80006d4 <lcd_put_cur>
				lcd_send_string("Entering");
 8000d16:	4893      	ldr	r0, [pc, #588]	; (8000f64 <main+0x668>)
 8000d18:	f7ff fd4b 	bl	80007b2 <lcd_send_string>
				lcd_put_cur(1,0);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f7ff fcd8 	bl	80006d4 <lcd_put_cur>
				lcd_send_string("Lockdown Mode");
 8000d24:	4890      	ldr	r0, [pc, #576]	; (8000f68 <main+0x66c>)
 8000d26:	f7ff fd44 	bl	80007b2 <lcd_send_string>
				lcd_put_cur(2,0);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fcd1 	bl	80006d4 <lcd_put_cur>
				lcd_send_string("Reset from Mobile");
 8000d32:	488e      	ldr	r0, [pc, #568]	; (8000f6c <main+0x670>)
 8000d34:	f7ff fd3d 	bl	80007b2 <lcd_send_string>
				HAL_Delay(2000);
 8000d38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d3c:	f000 fca4 	bl	8001688 <HAL_Delay>
				while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)!=1)
 8000d40:	e096      	b.n	8000e70 <main+0x574>
				{
					lcd_clear();
 8000d42:	f7ff fcbd 	bl	80006c0 <lcd_clear>
					lcd_put_cur(0,0);
 8000d46:	2100      	movs	r1, #0
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff fcc3 	bl	80006d4 <lcd_put_cur>
					lcd_send_string("Lockdown Mode Since");
 8000d4e:	4888      	ldr	r0, [pc, #544]	; (8000f70 <main+0x674>)
 8000d50:	f7ff fd2f 	bl	80007b2 <lcd_send_string>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2110      	movs	r1, #16
 8000d58:	487a      	ldr	r0, [pc, #488]	; (8000f44 <main+0x648>)
 8000d5a:	f000 ff41 	bl	8001be0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,1);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2120      	movs	r1, #32
 8000d62:	4878      	ldr	r0, [pc, #480]	; (8000f44 <main+0x648>)
 8000d64:	f000 ff3c 	bl	8001be0 <HAL_GPIO_WritePin>
					for (int j=0;;j++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	603b      	str	r3, [r7, #0]
					{
						if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1)
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f000 ff1d 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d100      	bne.n	8000d7e <main+0x482>
							break;
 8000d7c:	e078      	b.n	8000e70 <main+0x574>
						lcd_put_cur(1,0);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2001      	movs	r0, #1
 8000d82:	f7ff fca7 	bl	80006d4 <lcd_put_cur>
						if (j!=60)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2b3c      	cmp	r3, #60	; 0x3c
 8000d8a:	d01a      	beq.n	8000dc2 <main+0x4c6>
						{
							lcd_send_string(intTostr(j));
 8000d8c:	6838      	ldr	r0, [r7, #0]
 8000d8e:	f7ff fd25 	bl	80007dc <intTostr>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fd0c 	bl	80007b2 <lcd_send_string>
							if(j>99)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	2b63      	cmp	r3, #99	; 0x63
 8000d9e:	dd04      	ble.n	8000daa <main+0x4ae>
							lcd_put_cur(1,3);
 8000da0:	2103      	movs	r1, #3
 8000da2:	2001      	movs	r0, #1
 8000da4:	f7ff fc96 	bl	80006d4 <lcd_put_cur>
 8000da8:	e00b      	b.n	8000dc2 <main+0x4c6>
							else if(j>9)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	2b09      	cmp	r3, #9
 8000dae:	dd04      	ble.n	8000dba <main+0x4be>
							lcd_put_cur(1,2);
 8000db0:	2102      	movs	r1, #2
 8000db2:	2001      	movs	r0, #1
 8000db4:	f7ff fc8e 	bl	80006d4 <lcd_put_cur>
 8000db8:	e003      	b.n	8000dc2 <main+0x4c6>
							else
							lcd_put_cur(1,1);
 8000dba:	2101      	movs	r1, #1
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f7ff fc89 	bl	80006d4 <lcd_put_cur>
						}
						lcd_send_string(" Seconds ");
 8000dc2:	485f      	ldr	r0, [pc, #380]	; (8000f40 <main+0x644>)
 8000dc4:	f7ff fcf5 	bl	80007b2 <lcd_send_string>
						if (j==60)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	2b3c      	cmp	r3, #60	; 0x3c
 8000dcc:	d12c      	bne.n	8000e28 <main+0x52c>
						{
							j=0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	603b      	str	r3, [r7, #0]
							mul+=1;
 8000dd2:	4b68      	ldr	r3, [pc, #416]	; (8000f74 <main+0x678>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	4a66      	ldr	r2, [pc, #408]	; (8000f74 <main+0x678>)
 8000dda:	6013      	str	r3, [r2, #0]
							lcd_put_cur(2,0);
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2002      	movs	r0, #2
 8000de0:	f7ff fc78 	bl	80006d4 <lcd_put_cur>
							lcd_send_string(intTostr(mul));
 8000de4:	4b63      	ldr	r3, [pc, #396]	; (8000f74 <main+0x678>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fcf7 	bl	80007dc <intTostr>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fcde 	bl	80007b2 <lcd_send_string>
							if(mul>99)
 8000df6:	4b5f      	ldr	r3, [pc, #380]	; (8000f74 <main+0x678>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b63      	cmp	r3, #99	; 0x63
 8000dfc:	dd04      	ble.n	8000e08 <main+0x50c>
							lcd_put_cur(2,3);
 8000dfe:	2103      	movs	r1, #3
 8000e00:	2002      	movs	r0, #2
 8000e02:	f7ff fc67 	bl	80006d4 <lcd_put_cur>
 8000e06:	e00c      	b.n	8000e22 <main+0x526>
							else if(mul>9)
 8000e08:	4b5a      	ldr	r3, [pc, #360]	; (8000f74 <main+0x678>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b09      	cmp	r3, #9
 8000e0e:	dd04      	ble.n	8000e1a <main+0x51e>
							lcd_put_cur(2,2);
 8000e10:	2102      	movs	r1, #2
 8000e12:	2002      	movs	r0, #2
 8000e14:	f7ff fc5e 	bl	80006d4 <lcd_put_cur>
 8000e18:	e003      	b.n	8000e22 <main+0x526>
							else
							lcd_put_cur(2,1);
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f7ff fc59 	bl	80006d4 <lcd_put_cur>
							lcd_send_string(" Minutes");
 8000e22:	4855      	ldr	r0, [pc, #340]	; (8000f78 <main+0x67c>)
 8000e24:	f7ff fcc5 	bl	80007b2 <lcd_send_string>
						}
						if (j==0)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d106      	bne.n	8000e3c <main+0x540>
						{
							lcd_put_cur(1,0);
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff fc4f 	bl	80006d4 <lcd_put_cur>
							lcd_send_string("0 Seconds ");
 8000e36:	4851      	ldr	r0, [pc, #324]	; (8000f7c <main+0x680>)
 8000e38:	f7ff fcbb 	bl	80007b2 <lcd_send_string>
						}
						if (mul==0)
 8000e3c:	4b4d      	ldr	r3, [pc, #308]	; (8000f74 <main+0x678>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d106      	bne.n	8000e52 <main+0x556>
						{
							lcd_put_cur(2,0);
 8000e44:	2100      	movs	r1, #0
 8000e46:	2002      	movs	r0, #2
 8000e48:	f7ff fc44 	bl	80006d4 <lcd_put_cur>
							lcd_send_string("0 Minutes");
 8000e4c:	484c      	ldr	r0, [pc, #304]	; (8000f80 <main+0x684>)
 8000e4e:	f7ff fcb0 	bl	80007b2 <lcd_send_string>
						}

						HAL_Delay(1000);
 8000e52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e56:	f000 fc17 	bl	8001688 <HAL_Delay>
						lcd_put_cur(3,0);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f7ff fc39 	bl	80006d4 <lcd_put_cur>
						lcd_send_string("Reset from Mobile");
 8000e62:	4842      	ldr	r0, [pc, #264]	; (8000f6c <main+0x670>)
 8000e64:	f7ff fca5 	bl	80007b2 <lcd_send_string>
					for (int j=0;;j++)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	603b      	str	r3, [r7, #0]
						if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1)
 8000e6e:	e77d      	b.n	8000d6c <main+0x470>
				while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)!=1)
 8000e70:	2110      	movs	r1, #16
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e76:	f000 fe9b 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	f47f af60 	bne.w	8000d42 <main+0x446>
					}

				}
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2110      	movs	r1, #16
 8000e86:	482f      	ldr	r0, [pc, #188]	; (8000f44 <main+0x648>)
 8000e88:	f000 feaa 	bl	8001be0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2120      	movs	r1, #32
 8000e90:	482c      	ldr	r0, [pc, #176]	; (8000f44 <main+0x648>)
 8000e92:	f000 fea5 	bl	8001be0 <HAL_GPIO_WritePin>
				lcd_clear();
 8000e96:	f7ff fc13 	bl	80006c0 <lcd_clear>
				lcd_put_cur(0,0);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f7ff fc19 	bl	80006d4 <lcd_put_cur>
				lcd_send_string("Enter PIN");
 8000ea2:	4829      	ldr	r0, [pc, #164]	; (8000f48 <main+0x64c>)
 8000ea4:	f7ff fc85 	bl	80007b2 <lcd_send_string>
				lcd_put_cur(0,0);
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f7ff fc12 	bl	80006d4 <lcd_put_cur>
				memset(user, '\0', sizeof(user));
 8000eb0:	2206      	movs	r2, #6
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4825      	ldr	r0, [pc, #148]	; (8000f4c <main+0x650>)
 8000eb6:	f003 fba7 	bl	8004608 <memset>
				i=0;
 8000eba:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <main+0x654>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
				trail=0;
 8000ec0:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <main+0x658>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
				lockdown=0;
 8000ec6:	4b2f      	ldr	r3, [pc, #188]	; (8000f84 <main+0x688>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
				mul=0;
 8000ecc:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <main+0x678>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e537      	b.n	8000944 <main+0x48>
		}
	}
}
else
{
	lcd_clear();
 8000ed4:	f7ff fbf4 	bl	80006c0 <lcd_clear>
	lcd_put_cur(0,0);
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2000      	movs	r0, #0
 8000edc:	f7ff fbfa 	bl	80006d4 <lcd_put_cur>
	lcd_send_string("Entering");
 8000ee0:	4820      	ldr	r0, [pc, #128]	; (8000f64 <main+0x668>)
 8000ee2:	f7ff fc66 	bl	80007b2 <lcd_send_string>
	lcd_put_cur(1,0);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f7ff fbf3 	bl	80006d4 <lcd_put_cur>
	lcd_send_string("Pin RESET Mode");
 8000eee:	4826      	ldr	r0, [pc, #152]	; (8000f88 <main+0x68c>)
 8000ef0:	f7ff fc5f 	bl	80007b2 <lcd_send_string>
	lcd_put_cur(2,0);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	f7ff fbec 	bl	80006d4 <lcd_put_cur>
	lcd_send_string("Please Wait");
 8000efc:	4823      	ldr	r0, [pc, #140]	; (8000f8c <main+0x690>)
 8000efe:	f7ff fc58 	bl	80007b2 <lcd_send_string>
	HAL_Delay(1000);
 8000f02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f06:	f000 fbbf 	bl	8001688 <HAL_Delay>
	lcd_clear();
 8000f0a:	f7ff fbd9 	bl	80006c0 <lcd_clear>
	lcd_put_cur(0,0);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff fbdf 	bl	80006d4 <lcd_put_cur>
	lcd_send_string("Enter New Pin");
 8000f16:	481e      	ldr	r0, [pc, #120]	; (8000f90 <main+0x694>)
 8000f18:	f7ff fc4b 	bl	80007b2 <lcd_send_string>
	i=0;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <main+0x654>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
	key=Get_Key();
 8000f22:	f7ff f961 	bl	80001e8 <Get_Key>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <main+0x698>)
 8000f2c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(250);
 8000f2e:	20fa      	movs	r0, #250	; 0xfa
 8000f30:	f000 fbaa 	bl	8001688 <HAL_Delay>
	memset(pass, '\0', sizeof(pass));
 8000f34:	2206      	movs	r2, #6
 8000f36:	2100      	movs	r1, #0
 8000f38:	4817      	ldr	r0, [pc, #92]	; (8000f98 <main+0x69c>)
 8000f3a:	f003 fb65 	bl	8004608 <memset>
	while(i<5)
 8000f3e:	e04a      	b.n	8000fd6 <main+0x6da>
 8000f40:	080046fc 	.word	0x080046fc
 8000f44:	48000800 	.word	0x48000800
 8000f48:	080046c0 	.word	0x080046c0
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000160 	.word	0x20000160
 8000f54:	20000164 	.word	0x20000164
 8000f58:	08004708 	.word	0x08004708
 8000f5c:	08004710 	.word	0x08004710
 8000f60:	48000400 	.word	0x48000400
 8000f64:	08004724 	.word	0x08004724
 8000f68:	08004730 	.word	0x08004730
 8000f6c:	08004740 	.word	0x08004740
 8000f70:	08004754 	.word	0x08004754
 8000f74:	2000016c 	.word	0x2000016c
 8000f78:	08004768 	.word	0x08004768
 8000f7c:	08004774 	.word	0x08004774
 8000f80:	08004780 	.word	0x08004780
 8000f84:	20000168 	.word	0x20000168
 8000f88:	0800478c 	.word	0x0800478c
 8000f8c:	0800479c 	.word	0x0800479c
 8000f90:	080047a8 	.word	0x080047a8
 8000f94:	20000088 	.word	0x20000088
 8000f98:	20000008 	.word	0x20000008
	{
		pass[i]=key;
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <main+0x71c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a1e      	ldr	r2, [pc, #120]	; (800101c <main+0x720>)
 8000fa2:	7811      	ldrb	r1, [r2, #0]
 8000fa4:	4a1e      	ldr	r2, [pc, #120]	; (8001020 <main+0x724>)
 8000fa6:	54d1      	strb	r1, [r2, r3]
		lcd_put_cur(1,i);
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <main+0x71c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f7ff fb90 	bl	80006d4 <lcd_put_cur>
		lcd_send_string(&key);
 8000fb4:	4819      	ldr	r0, [pc, #100]	; (800101c <main+0x720>)
 8000fb6:	f7ff fbfc 	bl	80007b2 <lcd_send_string>
		i+=1;
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <main+0x71c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	4a15      	ldr	r2, [pc, #84]	; (8001018 <main+0x71c>)
 8000fc2:	6013      	str	r3, [r2, #0]
		key=Get_Key();
 8000fc4:	f7ff f910 	bl	80001e8 <Get_Key>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <main+0x720>)
 8000fce:	701a      	strb	r2, [r3, #0]
		HAL_Delay(250);
 8000fd0:	20fa      	movs	r0, #250	; 0xfa
 8000fd2:	f000 fb59 	bl	8001688 <HAL_Delay>
	while(i<5)
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <main+0x71c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	ddde      	ble.n	8000f9c <main+0x6a0>
	}
	lcd_clear();
 8000fde:	f7ff fb6f 	bl	80006c0 <lcd_clear>
	lcd_put_cur(0,0);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f7ff fb75 	bl	80006d4 <lcd_put_cur>
	lcd_send_string("Enter PIN");
 8000fea:	480e      	ldr	r0, [pc, #56]	; (8001024 <main+0x728>)
 8000fec:	f7ff fbe1 	bl	80007b2 <lcd_send_string>
	lcd_put_cur(0,0);
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff fb6e 	bl	80006d4 <lcd_put_cur>
	memset(user, '\0', sizeof(user));
 8000ff8:	2206      	movs	r2, #6
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	480a      	ldr	r0, [pc, #40]	; (8001028 <main+0x72c>)
 8000ffe:	f003 fb03 	bl	8004608 <memset>
	i=0;
 8001002:	4b05      	ldr	r3, [pc, #20]	; (8001018 <main+0x71c>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
	trail=0;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <main+0x730>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
	lockdown=0;
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <main+0x734>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
key=Get_Key();
 8001014:	e496      	b.n	8000944 <main+0x48>
 8001016:	bf00      	nop
 8001018:	20000160 	.word	0x20000160
 800101c:	20000088 	.word	0x20000088
 8001020:	20000008 	.word	0x20000008
 8001024:	080046c0 	.word	0x080046c0
 8001028:	20000000 	.word	0x20000000
 800102c:	20000164 	.word	0x20000164
 8001030:	20000168 	.word	0x20000168

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b0a6      	sub	sp, #152	; 0x98
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800103e:	2228      	movs	r2, #40	; 0x28
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fae0 	bl	8004608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2258      	movs	r2, #88	; 0x58
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f003 fad2 	bl	8004608 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001064:	2301      	movs	r3, #1
 8001066:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001068:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800106c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106e:	2301      	movs	r3, #1
 8001070:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800107c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001080:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001084:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fdd6 	bl	8001c44 <HAL_RCC_OscConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800109e:	f000 f965 	bl	800136c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a2:	230f      	movs	r3, #15
 80010a4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a6:	2302      	movs	r3, #2
 80010a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010bc:	2102      	movs	r1, #2
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 fe14 	bl	8002cec <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010ca:	f000 f94f 	bl	800136c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1;
 80010ce:	f241 0302 	movw	r3, #4098	; 0x1002
 80010d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80010d8:	2300      	movs	r3, #0
 80010da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 f83a 	bl	8003158 <HAL_RCCEx_PeriphCLKConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0xba>
  {
    Error_Handler();
 80010ea:	f000 f93f 	bl	800136c <Error_Handler>
  }
}
 80010ee:	bf00      	nop
 80010f0:	3798      	adds	r7, #152	; 0x98
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001118:	4a20      	ldr	r2, [pc, #128]	; (800119c <MX_TIM1_Init+0xa4>)
 800111a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_TIM1_Init+0xa0>)
 800111e:	2247      	movs	r2, #71	; 0x47
 8001120:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_TIM1_Init+0xa0>)
 800112a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800112e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001138:	2200      	movs	r2, #0
 800113a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_TIM1_Init+0xa0>)
 800113e:	2200      	movs	r2, #0
 8001140:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001142:	4815      	ldr	r0, [pc, #84]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001144:	f002 fa26 	bl	8003594 <HAL_TIM_Base_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800114e:	f000 f90d 	bl	800136c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001156:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4619      	mov	r1, r3
 800115e:	480e      	ldr	r0, [pc, #56]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001160:	f002 fad8 	bl	8003714 <HAL_TIM_ConfigClockSource>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800116a:	f000 f8ff 	bl	800136c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001180:	f002 fcca 	bl	8003b18 <HAL_TIMEx_MasterConfigSynchronization>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800118a:	f000 f8ef 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000008c 	.word	0x2000008c
 800119c:	40012c00 	.word	0x40012c00

080011a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011a6:	4a15      	ldr	r2, [pc, #84]	; (80011fc <MX_USART2_UART_Init+0x5c>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011c6:	220c      	movs	r2, #12
 80011c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011e4:	f002 fd24 	bl	8003c30 <HAL_UART_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ee:	f000 f8bd 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200000d8 	.word	0x200000d8
 80011fc:	40004400 	.word	0x40004400

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	4b52      	ldr	r3, [pc, #328]	; (8001360 <MX_GPIO_Init+0x160>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	4a51      	ldr	r2, [pc, #324]	; (8001360 <MX_GPIO_Init+0x160>)
 800121c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001220:	6153      	str	r3, [r2, #20]
 8001222:	4b4f      	ldr	r3, [pc, #316]	; (8001360 <MX_GPIO_Init+0x160>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800122e:	4b4c      	ldr	r3, [pc, #304]	; (8001360 <MX_GPIO_Init+0x160>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a4b      	ldr	r2, [pc, #300]	; (8001360 <MX_GPIO_Init+0x160>)
 8001234:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001238:	6153      	str	r3, [r2, #20]
 800123a:	4b49      	ldr	r3, [pc, #292]	; (8001360 <MX_GPIO_Init+0x160>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b46      	ldr	r3, [pc, #280]	; (8001360 <MX_GPIO_Init+0x160>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a45      	ldr	r2, [pc, #276]	; (8001360 <MX_GPIO_Init+0x160>)
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	6153      	str	r3, [r2, #20]
 8001252:	4b43      	ldr	r3, [pc, #268]	; (8001360 <MX_GPIO_Init+0x160>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b40      	ldr	r3, [pc, #256]	; (8001360 <MX_GPIO_Init+0x160>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	4a3f      	ldr	r2, [pc, #252]	; (8001360 <MX_GPIO_Init+0x160>)
 8001264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001268:	6153      	str	r3, [r2, #20]
 800126a:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <MX_GPIO_Init+0x160>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|KC0_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	21b1      	movs	r1, #177	; 0xb1
 800127a:	483a      	ldr	r0, [pc, #232]	; (8001364 <MX_GPIO_Init+0x164>)
 800127c:	f000 fcb0 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|KC3_Pin
 8001280:	2200      	movs	r2, #0
 8001282:	f64f 4187 	movw	r1, #64647	; 0xfc87
 8001286:	4838      	ldr	r0, [pc, #224]	; (8001368 <MX_GPIO_Init+0x168>)
 8001288:	f000 fcaa 	bl	8001be0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, KC2_Pin|KC1_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f000 fca3 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC4 PC5 KC0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|KC0_Pin;
 800129a:	23b1      	movs	r3, #177	; 0xb1
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	482c      	ldr	r0, [pc, #176]	; (8001364 <MX_GPIO_Init+0x164>)
 80012b2:	f000 faf3 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012b6:	2302      	movs	r3, #2
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012be:	2302      	movs	r3, #2
 80012c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4826      	ldr	r0, [pc, #152]	; (8001364 <MX_GPIO_Init+0x164>)
 80012ca:	f000 fae7 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012ce:	2310      	movs	r3, #16
 80012d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e4:	f000 fada 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : KR0_Pin KR1_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR0_Pin|KR1_Pin|KR2_Pin;
 80012e8:	23e0      	movs	r3, #224	; 0xe0
 80012ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012f0:	2302      	movs	r3, #2
 80012f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f000 facd 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 KC3_Pin
                           PB11 PB12 PB13 PB14
                           PB15 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|KC3_Pin
 8001302:	f64f 4387 	movw	r3, #64647	; 0xfc87
 8001306:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4813      	ldr	r0, [pc, #76]	; (8001368 <MX_GPIO_Init+0x168>)
 800131c:	f000 fabe 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : KC2_Pin KC1_Pin */
  GPIO_InitStruct.Pin = KC2_Pin|KC1_Pin;
 8001320:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133c:	f000 faae 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR3_Pin */
  GPIO_InitStruct.Pin = KR3_Pin;
 8001340:	2340      	movs	r3, #64	; 0x40
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001348:	2302      	movs	r3, #2
 800134a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR3_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_GPIO_Init+0x168>)
 8001354:	f000 faa2 	bl	800189c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001358:	bf00      	nop
 800135a:	3728      	adds	r7, #40	; 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40021000 	.word	0x40021000
 8001364:	48000800 	.word	0x48000800
 8001368:	48000400 	.word	0x48000400

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001374:	e7fe      	b.n	8001374 <Error_Handler+0x8>
	...

08001378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_MspInit+0x44>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_MspInit+0x44>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6193      	str	r3, [r2, #24]
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_MspInit+0x44>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_MspInit+0x44>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a08      	ldr	r2, [pc, #32]	; (80013bc <HAL_MspInit+0x44>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	61d3      	str	r3, [r2, #28]
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_MspInit+0x44>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000

080013c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_TIM_Base_MspInit+0x38>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d10b      	bne.n	80013ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_TIM_Base_MspInit+0x3c>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	4a09      	ldr	r2, [pc, #36]	; (80013fc <HAL_TIM_Base_MspInit+0x3c>)
 80013d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013dc:	6193      	str	r3, [r2, #24]
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <HAL_TIM_Base_MspInit+0x3c>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40012c00 	.word	0x40012c00
 80013fc:	40021000 	.word	0x40021000

08001400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a17      	ldr	r2, [pc, #92]	; (800147c <HAL_UART_MspInit+0x7c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d128      	bne.n	8001474 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_UART_MspInit+0x80>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a16      	ldr	r2, [pc, #88]	; (8001480 <HAL_UART_MspInit+0x80>)
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <HAL_UART_MspInit+0x80>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_UART_MspInit+0x80>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	4a10      	ldr	r2, [pc, #64]	; (8001480 <HAL_UART_MspInit+0x80>)
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	6153      	str	r3, [r2, #20]
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_UART_MspInit+0x80>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001452:	230c      	movs	r3, #12
 8001454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001462:	2307      	movs	r3, #7
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001470:	f000 fa14 	bl	800189c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40004400 	.word	0x40004400
 8001480:	40021000 	.word	0x40021000

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler+0x4>

0800148a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler+0x4>

08001496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d0:	f000 f8ba 	bl	8001648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e0:	4a14      	ldr	r2, [pc, #80]	; (8001534 <_sbrk+0x5c>)
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <_sbrk+0x60>)
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <_sbrk+0x64>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <_sbrk+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	429a      	cmp	r2, r3
 8001506:	d207      	bcs.n	8001518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001508:	f003 f896 	bl	8004638 <__errno>
 800150c:	4603      	mov	r3, r0
 800150e:	220c      	movs	r2, #12
 8001510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
 8001516:	e009      	b.n	800152c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <_sbrk+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <_sbrk+0x64>)
 8001528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20010000 	.word	0x20010000
 8001538:	00000400 	.word	0x00000400
 800153c:	20000170 	.word	0x20000170
 8001540:	200002c0 	.word	0x200002c0

08001544 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <SystemInit+0x20>)
 800154a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <SystemInit+0x20>)
 8001550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800156c:	f7ff ffea 	bl	8001544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001572:	490d      	ldr	r1, [pc, #52]	; (80015a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <LoopForever+0xe>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001588:	4c0a      	ldr	r4, [pc, #40]	; (80015b4 <LoopForever+0x16>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001596:	f003 f855 	bl	8004644 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800159a:	f7ff f9af 	bl	80008fc <main>

0800159e <LoopForever>:

LoopForever:
    b LoopForever
 800159e:	e7fe      	b.n	800159e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80015ac:	080047f8 	.word	0x080047f8
  ldr r2, =_sbss
 80015b0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80015b4:	200002c0 	.word	0x200002c0

080015b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC1_2_IRQHandler>
	...

080015bc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_Init+0x28>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_Init+0x28>)
 80015c6:	f043 0310 	orr.w	r3, r3, #16
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f931 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d2:	200f      	movs	r0, #15
 80015d4:	f000 f808 	bl	80015e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d8:	f7ff fece 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40022000 	.word	0x40022000

080015e8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x54>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x58>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f93b 	bl	8001882 <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e00e      	b.n	8001634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d80a      	bhi.n	8001632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f000 f911 	bl	800184a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001628:	4a06      	ldr	r2, [pc, #24]	; (8001644 <HAL_InitTick+0x5c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000010 	.word	0x20000010
 8001640:	20000018 	.word	0x20000018
 8001644:	20000014 	.word	0x20000014

08001648 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x20>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x24>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <HAL_IncTick+0x24>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000018 	.word	0x20000018
 800166c:	20000174 	.word	0x20000174

08001670 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;  
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_GetTick+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000174 	.word	0x20000174

08001688 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001690:	f7ff ffee 	bl	8001670 <HAL_GetTick>
 8001694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a0:	d005      	beq.n	80016ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <HAL_Delay+0x44>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80016ae:	bf00      	nop
 80016b0:	f7ff ffde 	bl	8001670 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d8f7      	bhi.n	80016b0 <HAL_Delay+0x28>
  {
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000018 	.word	0x20000018

080016d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	db0a      	blt.n	800175e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	490c      	ldr	r1, [pc, #48]	; (8001780 <__NVIC_SetPriority+0x4c>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	440b      	add	r3, r1
 8001758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800175c:	e00a      	b.n	8001774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4908      	ldr	r1, [pc, #32]	; (8001784 <__NVIC_SetPriority+0x50>)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	3b04      	subs	r3, #4
 800176c:	0112      	lsls	r2, r2, #4
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	440b      	add	r3, r1
 8001772:	761a      	strb	r2, [r3, #24]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000e100 	.word	0xe000e100
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f1c3 0307 	rsb	r3, r3, #7
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	bf28      	it	cs
 80017a6:	2304      	movcs	r3, #4
 80017a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3304      	adds	r3, #4
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d902      	bls.n	80017b8 <NVIC_EncodePriority+0x30>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3b03      	subs	r3, #3
 80017b6:	e000      	b.n	80017ba <NVIC_EncodePriority+0x32>
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43d9      	mvns	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	4313      	orrs	r3, r2
         );
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3724      	adds	r7, #36	; 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001800:	d301      	bcc.n	8001806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001802:	2301      	movs	r3, #1
 8001804:	e00f      	b.n	8001826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <SysTick_Config+0x40>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180e:	210f      	movs	r1, #15
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f7ff ff8e 	bl	8001734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <SysTick_Config+0x40>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <SysTick_Config+0x40>)
 8001820:	2207      	movs	r2, #7
 8001822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	e000e010 	.word	0xe000e010

08001834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ff47 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800185c:	f7ff ff5c 	bl	8001718 <__NVIC_GetPriorityGrouping>
 8001860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	6978      	ldr	r0, [r7, #20]
 8001868:	f7ff ff8e 	bl	8001788 <NVIC_EncodePriority>
 800186c:	4602      	mov	r2, r0
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff5d 	bl	8001734 <__NVIC_SetPriority>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffb0 	bl	80017f0 <SysTick_Config>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018aa:	e160      	b.n	8001b6e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	2101      	movs	r1, #1
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	4013      	ands	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 8152 	beq.w	8001b68 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d005      	beq.n	80018dc <HAL_GPIO_Init+0x40>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d130      	bne.n	800193e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001912:	2201      	movs	r2, #1
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	f003 0201 	and.w	r2, r3, #1
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b03      	cmp	r3, #3
 8001948:	d017      	beq.n	800197a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	2203      	movs	r2, #3
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d123      	bne.n	80019ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	08da      	lsrs	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3208      	adds	r2, #8
 800198e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	220f      	movs	r2, #15
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	08da      	lsrs	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3208      	adds	r2, #8
 80019c8:	6939      	ldr	r1, [r7, #16]
 80019ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2203      	movs	r2, #3
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0203 	and.w	r2, r3, #3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80ac 	beq.w	8001b68 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a10:	4b5e      	ldr	r3, [pc, #376]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	4a5d      	ldr	r2, [pc, #372]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6193      	str	r3, [r2, #24]
 8001a1c:	4b5b      	ldr	r3, [pc, #364]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a28:	4a59      	ldr	r2, [pc, #356]	; (8001b90 <HAL_GPIO_Init+0x2f4>)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	3302      	adds	r3, #2
 8001a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	220f      	movs	r2, #15
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a52:	d025      	beq.n	8001aa0 <HAL_GPIO_Init+0x204>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a4f      	ldr	r2, [pc, #316]	; (8001b94 <HAL_GPIO_Init+0x2f8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d01f      	beq.n	8001a9c <HAL_GPIO_Init+0x200>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a4e      	ldr	r2, [pc, #312]	; (8001b98 <HAL_GPIO_Init+0x2fc>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d019      	beq.n	8001a98 <HAL_GPIO_Init+0x1fc>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a4d      	ldr	r2, [pc, #308]	; (8001b9c <HAL_GPIO_Init+0x300>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d013      	beq.n	8001a94 <HAL_GPIO_Init+0x1f8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a4c      	ldr	r2, [pc, #304]	; (8001ba0 <HAL_GPIO_Init+0x304>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d00d      	beq.n	8001a90 <HAL_GPIO_Init+0x1f4>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a4b      	ldr	r2, [pc, #300]	; (8001ba4 <HAL_GPIO_Init+0x308>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d007      	beq.n	8001a8c <HAL_GPIO_Init+0x1f0>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a4a      	ldr	r2, [pc, #296]	; (8001ba8 <HAL_GPIO_Init+0x30c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_GPIO_Init+0x1ec>
 8001a84:	2306      	movs	r3, #6
 8001a86:	e00c      	b.n	8001aa2 <HAL_GPIO_Init+0x206>
 8001a88:	2307      	movs	r3, #7
 8001a8a:	e00a      	b.n	8001aa2 <HAL_GPIO_Init+0x206>
 8001a8c:	2305      	movs	r3, #5
 8001a8e:	e008      	b.n	8001aa2 <HAL_GPIO_Init+0x206>
 8001a90:	2304      	movs	r3, #4
 8001a92:	e006      	b.n	8001aa2 <HAL_GPIO_Init+0x206>
 8001a94:	2303      	movs	r3, #3
 8001a96:	e004      	b.n	8001aa2 <HAL_GPIO_Init+0x206>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e002      	b.n	8001aa2 <HAL_GPIO_Init+0x206>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <HAL_GPIO_Init+0x206>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	f002 0203 	and.w	r2, r2, #3
 8001aa8:	0092      	lsls	r2, r2, #2
 8001aaa:	4093      	lsls	r3, r2
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ab2:	4937      	ldr	r1, [pc, #220]	; (8001b90 <HAL_GPIO_Init+0x2f4>)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ac0:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <HAL_GPIO_Init+0x310>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ae4:	4a31      	ldr	r2, [pc, #196]	; (8001bac <HAL_GPIO_Init+0x310>)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aea:	4b30      	ldr	r3, [pc, #192]	; (8001bac <HAL_GPIO_Init+0x310>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b0e:	4a27      	ldr	r2, [pc, #156]	; (8001bac <HAL_GPIO_Init+0x310>)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b14:	4b25      	ldr	r3, [pc, #148]	; (8001bac <HAL_GPIO_Init+0x310>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b38:	4a1c      	ldr	r2, [pc, #112]	; (8001bac <HAL_GPIO_Init+0x310>)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <HAL_GPIO_Init+0x310>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <HAL_GPIO_Init+0x310>)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f47f ae97 	bne.w	80018ac <HAL_GPIO_Init+0x10>
  }
}
 8001b7e:	bf00      	nop
 8001b80:	bf00      	nop
 8001b82:	371c      	adds	r7, #28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40010000 	.word	0x40010000
 8001b94:	48000400 	.word	0x48000400
 8001b98:	48000800 	.word	0x48000800
 8001b9c:	48000c00 	.word	0x48000c00
 8001ba0:	48001000 	.word	0x48001000
 8001ba4:	48001400 	.word	0x48001400
 8001ba8:	48001800 	.word	0x48001800
 8001bac:	40010400 	.word	0x40010400

08001bb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	887b      	ldrh	r3, [r7, #2]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
 8001bcc:	e001      	b.n	8001bd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	807b      	strh	r3, [r7, #2]
 8001bec:	4613      	mov	r3, r2
 8001bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf0:	787b      	ldrb	r3, [r7, #1]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bfc:	e002      	b.n	8001c04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c22:	887a      	ldrh	r2, [r7, #2]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4013      	ands	r3, r2
 8001c28:	041a      	lsls	r2, r3, #16
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	43d9      	mvns	r1, r3
 8001c2e:	887b      	ldrh	r3, [r7, #2]
 8001c30:	400b      	ands	r3, r1
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	619a      	str	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d102      	bne.n	8001c6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	f001 b83a 	b.w	8002cde <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 816f 	beq.w	8001f5e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c80:	4bb5      	ldr	r3, [pc, #724]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d00c      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c8c:	4bb2      	ldr	r3, [pc, #712]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d15c      	bne.n	8001d52 <HAL_RCC_OscConfig+0x10e>
 8001c98:	4baf      	ldr	r3, [pc, #700]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca4:	d155      	bne.n	8001d52 <HAL_RCC_OscConfig+0x10e>
 8001ca6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001caa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d102      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x94>
 8001cd2:	4ba1      	ldr	r3, [pc, #644]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	e015      	b.n	8001d04 <HAL_RCC_OscConfig+0xc0>
 8001cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cdc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001cf4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d00:	4b95      	ldr	r3, [pc, #596]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d08:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001d0c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001d10:	fa92 f2a2 	rbit	r2, r2
 8001d14:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001d18:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d1c:	fab2 f282 	clz	r2, r2
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	f042 0220 	orr.w	r2, r2, #32
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	f002 021f 	and.w	r2, r2, #31
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 8111 	beq.w	8001f5c <HAL_RCC_OscConfig+0x318>
 8001d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f040 8108 	bne.w	8001f5c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f000 bfc6 	b.w	8002cde <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d62:	d106      	bne.n	8001d72 <HAL_RCC_OscConfig+0x12e>
 8001d64:	4b7c      	ldr	r3, [pc, #496]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a7b      	ldr	r2, [pc, #492]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	e036      	b.n	8001de0 <HAL_RCC_OscConfig+0x19c>
 8001d72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x158>
 8001d82:	4b75      	ldr	r3, [pc, #468]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a74      	ldr	r2, [pc, #464]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b72      	ldr	r3, [pc, #456]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a71      	ldr	r2, [pc, #452]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e021      	b.n	8001de0 <HAL_RCC_OscConfig+0x19c>
 8001d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x184>
 8001dae:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a69      	ldr	r2, [pc, #420]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4b67      	ldr	r3, [pc, #412]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a66      	ldr	r2, [pc, #408]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e00b      	b.n	8001de0 <HAL_RCC_OscConfig+0x19c>
 8001dc8:	4b63      	ldr	r3, [pc, #396]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a62      	ldr	r2, [pc, #392]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b60      	ldr	r3, [pc, #384]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a5f      	ldr	r2, [pc, #380]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dde:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d059      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fc3e 	bl	8001670 <HAL_GetTick>
 8001df4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dfa:	f7ff fc39 	bl	8001670 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d902      	bls.n	8001e10 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	f000 bf67 	b.w	8002cde <HAL_RCC_OscConfig+0x109a>
 8001e10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e14:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001e24:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e28:	fab3 f383 	clz	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d102      	bne.n	8001e42 <HAL_RCC_OscConfig+0x1fe>
 8001e3c:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	e015      	b.n	8001e6e <HAL_RCC_OscConfig+0x22a>
 8001e42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e46:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001e56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e5a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001e5e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e72:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001e76:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001e7a:	fa92 f2a2 	rbit	r2, r2
 8001e7e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001e82:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e86:	fab2 f282 	clz	r2, r2
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	f042 0220 	orr.w	r2, r2, #32
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	f002 021f 	and.w	r2, r2, #31
 8001e96:	2101      	movs	r1, #1
 8001e98:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0ab      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1b6>
 8001ea2:	e05c      	b.n	8001f5e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fbe4 	bl	8001670 <HAL_GetTick>
 8001ea8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eae:	f7ff fbdf 	bl	8001670 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	; 0x64
 8001ebc:	d902      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	f000 bf0d 	b.w	8002cde <HAL_RCC_OscConfig+0x109a>
 8001ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001ed8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d102      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x2b2>
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	e015      	b.n	8001f22 <HAL_RCC_OscConfig+0x2de>
 8001ef6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001efa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001f0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f0e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f12:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <HAL_RCC_OscConfig+0x314>)
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f26:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001f2a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001f2e:	fa92 f2a2 	rbit	r2, r2
 8001f32:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001f36:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001f3a:	fab2 f282 	clz	r2, r2
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	f042 0220 	orr.w	r2, r2, #32
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	f002 021f 	and.w	r2, r2, #31
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1ab      	bne.n	8001eae <HAL_RCC_OscConfig+0x26a>
 8001f56:	e002      	b.n	8001f5e <HAL_RCC_OscConfig+0x31a>
 8001f58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 817f 	beq.w	8002272 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f74:	4ba7      	ldr	r3, [pc, #668]	; (8002214 <HAL_RCC_OscConfig+0x5d0>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00c      	beq.n	8001f9a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f80:	4ba4      	ldr	r3, [pc, #656]	; (8002214 <HAL_RCC_OscConfig+0x5d0>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d173      	bne.n	8002074 <HAL_RCC_OscConfig+0x430>
 8001f8c:	4ba1      	ldr	r3, [pc, #644]	; (8002214 <HAL_RCC_OscConfig+0x5d0>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f98:	d16c      	bne.n	8002074 <HAL_RCC_OscConfig+0x430>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001fa4:	fa93 f3a3 	rbit	r3, r3
 8001fa8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001fac:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb0:	fab3 f383 	clz	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d102      	bne.n	8001fca <HAL_RCC_OscConfig+0x386>
 8001fc4:	4b93      	ldr	r3, [pc, #588]	; (8002214 <HAL_RCC_OscConfig+0x5d0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	e013      	b.n	8001ff2 <HAL_RCC_OscConfig+0x3ae>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001fd4:	fa93 f3a3 	rbit	r3, r3
 8001fd8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001fdc:	2302      	movs	r3, #2
 8001fde:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001fe2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001fee:	4b89      	ldr	r3, [pc, #548]	; (8002214 <HAL_RCC_OscConfig+0x5d0>)
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001ff8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001ffc:	fa92 f2a2 	rbit	r2, r2
 8002000:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002004:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002008:	fab2 f282 	clz	r2, r2
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f042 0220 	orr.w	r2, r2, #32
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f002 021f 	and.w	r2, r2, #31
 8002018:	2101      	movs	r1, #1
 800201a:	fa01 f202 	lsl.w	r2, r1, r2
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCC_OscConfig+0x3f6>
 8002024:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002028:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d002      	beq.n	800203a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	f000 be52 	b.w	8002cde <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203a:	4b76      	ldr	r3, [pc, #472]	; (8002214 <HAL_RCC_OscConfig+0x5d0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002042:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002046:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	21f8      	movs	r1, #248	; 0xf8
 8002050:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002058:	fa91 f1a1 	rbit	r1, r1
 800205c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002060:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002064:	fab1 f181 	clz	r1, r1
 8002068:	b2c9      	uxtb	r1, r1
 800206a:	408b      	lsls	r3, r1
 800206c:	4969      	ldr	r1, [pc, #420]	; (8002214 <HAL_RCC_OscConfig+0x5d0>)
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002072:	e0fe      	b.n	8002272 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002078:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 8088 	beq.w	8002196 <HAL_RCC_OscConfig+0x552>
 8002086:	2301      	movs	r3, #1
 8002088:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002090:	fa93 f3a3 	rbit	r3, r3
 8002094:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002098:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	461a      	mov	r2, r3
 80020ae:	2301      	movs	r3, #1
 80020b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7ff fadd 	bl	8001670 <HAL_GetTick>
 80020b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020bc:	f7ff fad8 	bl	8001670 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d902      	bls.n	80020d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	f000 be06 	b.w	8002cde <HAL_RCC_OscConfig+0x109a>
 80020d2:	2302      	movs	r3, #2
 80020d4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80020e4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d102      	bne.n	8002102 <HAL_RCC_OscConfig+0x4be>
 80020fc:	4b45      	ldr	r3, [pc, #276]	; (8002214 <HAL_RCC_OscConfig+0x5d0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	e013      	b.n	800212a <HAL_RCC_OscConfig+0x4e6>
 8002102:	2302      	movs	r3, #2
 8002104:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800210c:	fa93 f3a3 	rbit	r3, r3
 8002110:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002114:	2302      	movs	r3, #2
 8002116:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800211a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002126:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <HAL_RCC_OscConfig+0x5d0>)
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	2202      	movs	r2, #2
 800212c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002130:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002134:	fa92 f2a2 	rbit	r2, r2
 8002138:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800213c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002140:	fab2 f282 	clz	r2, r2
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	f042 0220 	orr.w	r2, r2, #32
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	f002 021f 	and.w	r2, r2, #31
 8002150:	2101      	movs	r1, #1
 8002152:	fa01 f202 	lsl.w	r2, r1, r2
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0af      	beq.n	80020bc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215c:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <HAL_RCC_OscConfig+0x5d0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002168:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	21f8      	movs	r1, #248	; 0xf8
 8002172:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800217a:	fa91 f1a1 	rbit	r1, r1
 800217e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002182:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002186:	fab1 f181 	clz	r1, r1
 800218a:	b2c9      	uxtb	r1, r1
 800218c:	408b      	lsls	r3, r1
 800218e:	4921      	ldr	r1, [pc, #132]	; (8002214 <HAL_RCC_OscConfig+0x5d0>)
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]
 8002194:	e06d      	b.n	8002272 <HAL_RCC_OscConfig+0x62e>
 8002196:	2301      	movs	r3, #1
 8002198:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80021a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ac:	fab3 f383 	clz	r3, r3
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	461a      	mov	r2, r3
 80021be:	2300      	movs	r3, #0
 80021c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7ff fa55 	bl	8001670 <HAL_GetTick>
 80021c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021cc:	f7ff fa50 	bl	8001670 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d902      	bls.n	80021e2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	f000 bd7e 	b.w	8002cde <HAL_RCC_OscConfig+0x109a>
 80021e2:	2302      	movs	r3, #2
 80021e4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80021f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d105      	bne.n	8002218 <HAL_RCC_OscConfig+0x5d4>
 800220c:	4b01      	ldr	r3, [pc, #4]	; (8002214 <HAL_RCC_OscConfig+0x5d0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	e016      	b.n	8002240 <HAL_RCC_OscConfig+0x5fc>
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	2302      	movs	r3, #2
 800221a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800222a:	2302      	movs	r3, #2
 800222c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002230:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800223c:	4bbf      	ldr	r3, [pc, #764]	; (800253c <HAL_RCC_OscConfig+0x8f8>)
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	2202      	movs	r2, #2
 8002242:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002246:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800224a:	fa92 f2a2 	rbit	r2, r2
 800224e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002252:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002256:	fab2 f282 	clz	r2, r2
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	f042 0220 	orr.w	r2, r2, #32
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f002 021f 	and.w	r2, r2, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f202 	lsl.w	r2, r1, r2
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1ac      	bne.n	80021cc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002272:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002276:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8113 	beq.w	80024ae <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d07c      	beq.n	8002392 <HAL_RCC_OscConfig+0x74e>
 8002298:	2301      	movs	r3, #1
 800229a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80022aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	4ba2      	ldr	r3, [pc, #648]	; (8002540 <HAL_RCC_OscConfig+0x8fc>)
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	461a      	mov	r2, r3
 80022be:	2301      	movs	r3, #1
 80022c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c2:	f7ff f9d5 	bl	8001670 <HAL_GetTick>
 80022c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022cc:	f7ff f9d0 	bl	8001670 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d902      	bls.n	80022e2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	f000 bcfe 	b.w	8002cde <HAL_RCC_OscConfig+0x109a>
 80022e2:	2302      	movs	r3, #2
 80022e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022ec:	fa93 f2a3 	rbit	r2, r3
 80022f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002302:	2202      	movs	r2, #2
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	fa93 f2a3 	rbit	r2, r3
 8002314:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002322:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002326:	2202      	movs	r2, #2
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	fa93 f2a3 	rbit	r2, r3
 8002338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800233c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002340:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	4b7e      	ldr	r3, [pc, #504]	; (800253c <HAL_RCC_OscConfig+0x8f8>)
 8002344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800234e:	2102      	movs	r1, #2
 8002350:	6019      	str	r1, [r3, #0]
 8002352:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002356:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	fa93 f1a3 	rbit	r1, r3
 8002360:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002364:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002368:	6019      	str	r1, [r3, #0]
  return result;
 800236a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800236e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	fab3 f383 	clz	r3, r3
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	2101      	movs	r1, #1
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d09d      	beq.n	80022cc <HAL_RCC_OscConfig+0x688>
 8002390:	e08d      	b.n	80024ae <HAL_RCC_OscConfig+0x86a>
 8002392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002396:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	fa93 f2a3 	rbit	r2, r3
 80023ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80023b4:	601a      	str	r2, [r3, #0]
  return result;
 80023b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80023be:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c0:	fab3 f383 	clz	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	4b5d      	ldr	r3, [pc, #372]	; (8002540 <HAL_RCC_OscConfig+0x8fc>)
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	461a      	mov	r2, r3
 80023d0:	2300      	movs	r3, #0
 80023d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7ff f94c 	bl	8001670 <HAL_GetTick>
 80023d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023de:	f7ff f947 	bl	8001670 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d902      	bls.n	80023f4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	f000 bc75 	b.w	8002cde <HAL_RCC_OscConfig+0x109a>
 80023f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023fc:	2202      	movs	r2, #2
 80023fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002404:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	fa93 f2a3 	rbit	r2, r3
 800240e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002412:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002420:	2202      	movs	r2, #2
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002428:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	fa93 f2a3 	rbit	r2, r3
 8002432:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002440:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002444:	2202      	movs	r2, #2
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	fa93 f2a3 	rbit	r2, r3
 8002456:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800245a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800245e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002460:	4b36      	ldr	r3, [pc, #216]	; (800253c <HAL_RCC_OscConfig+0x8f8>)
 8002462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002464:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002468:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800246c:	2102      	movs	r1, #2
 800246e:	6019      	str	r1, [r3, #0]
 8002470:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002474:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	fa93 f1a3 	rbit	r1, r3
 800247e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002482:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002486:	6019      	str	r1, [r3, #0]
  return result;
 8002488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800248c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f003 031f 	and.w	r3, r3, #31
 80024a2:	2101      	movs	r1, #1
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d197      	bne.n	80023de <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 81a5 	beq.w	800280e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ca:	4b1c      	ldr	r3, [pc, #112]	; (800253c <HAL_RCC_OscConfig+0x8f8>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d116      	bne.n	8002504 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d6:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_RCC_OscConfig+0x8f8>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4a18      	ldr	r2, [pc, #96]	; (800253c <HAL_RCC_OscConfig+0x8f8>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	61d3      	str	r3, [r2, #28]
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <HAL_RCC_OscConfig+0x8f8>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80024ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024fc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80024fe:	2301      	movs	r3, #1
 8002500:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <HAL_RCC_OscConfig+0x900>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d121      	bne.n	8002554 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <HAL_RCC_OscConfig+0x900>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <HAL_RCC_OscConfig+0x900>)
 8002516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251c:	f7ff f8a8 	bl	8001670 <HAL_GetTick>
 8002520:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	e010      	b.n	8002548 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002526:	f7ff f8a3 	bl	8001670 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	; 0x64
 8002534:	d908      	bls.n	8002548 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e3d1      	b.n	8002cde <HAL_RCC_OscConfig+0x109a>
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	10908120 	.word	0x10908120
 8002544:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002548:	4b8d      	ldr	r3, [pc, #564]	; (8002780 <HAL_RCC_OscConfig+0xb3c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0e8      	beq.n	8002526 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002558:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d106      	bne.n	8002572 <HAL_RCC_OscConfig+0x92e>
 8002564:	4b87      	ldr	r3, [pc, #540]	; (8002784 <HAL_RCC_OscConfig+0xb40>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4a86      	ldr	r2, [pc, #536]	; (8002784 <HAL_RCC_OscConfig+0xb40>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6213      	str	r3, [r2, #32]
 8002570:	e035      	b.n	80025de <HAL_RCC_OscConfig+0x99a>
 8002572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002576:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x958>
 8002582:	4b80      	ldr	r3, [pc, #512]	; (8002784 <HAL_RCC_OscConfig+0xb40>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	4a7f      	ldr	r2, [pc, #508]	; (8002784 <HAL_RCC_OscConfig+0xb40>)
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	6213      	str	r3, [r2, #32]
 800258e:	4b7d      	ldr	r3, [pc, #500]	; (8002784 <HAL_RCC_OscConfig+0xb40>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4a7c      	ldr	r2, [pc, #496]	; (8002784 <HAL_RCC_OscConfig+0xb40>)
 8002594:	f023 0304 	bic.w	r3, r3, #4
 8002598:	6213      	str	r3, [r2, #32]
 800259a:	e020      	b.n	80025de <HAL_RCC_OscConfig+0x99a>
 800259c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b05      	cmp	r3, #5
 80025aa:	d10c      	bne.n	80025c6 <HAL_RCC_OscConfig+0x982>
 80025ac:	4b75      	ldr	r3, [pc, #468]	; (8002784 <HAL_RCC_OscConfig+0xb40>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4a74      	ldr	r2, [pc, #464]	; (8002784 <HAL_RCC_OscConfig+0xb40>)
 80025b2:	f043 0304 	orr.w	r3, r3, #4
 80025b6:	6213      	str	r3, [r2, #32]
 80025b8:	4b72      	ldr	r3, [pc, #456]	; (8002784 <HAL_RCC_OscConfig+0xb40>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4a71      	ldr	r2, [pc, #452]	; (8002784 <HAL_RCC_OscConfig+0xb40>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6213      	str	r3, [r2, #32]
 80025c4:	e00b      	b.n	80025de <HAL_RCC_OscConfig+0x99a>
 80025c6:	4b6f      	ldr	r3, [pc, #444]	; (8002784 <HAL_RCC_OscConfig+0xb40>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4a6e      	ldr	r2, [pc, #440]	; (8002784 <HAL_RCC_OscConfig+0xb40>)
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	6213      	str	r3, [r2, #32]
 80025d2:	4b6c      	ldr	r3, [pc, #432]	; (8002784 <HAL_RCC_OscConfig+0xb40>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4a6b      	ldr	r2, [pc, #428]	; (8002784 <HAL_RCC_OscConfig+0xb40>)
 80025d8:	f023 0304 	bic.w	r3, r3, #4
 80025dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 8081 	beq.w	80026f2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f0:	f7ff f83e 	bl	8001670 <HAL_GetTick>
 80025f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f8:	e00b      	b.n	8002612 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7ff f839 	bl	8001670 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	; 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e365      	b.n	8002cde <HAL_RCC_OscConfig+0x109a>
 8002612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002616:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800261a:	2202      	movs	r2, #2
 800261c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002622:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	fa93 f2a3 	rbit	r2, r3
 800262c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002630:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800263a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800263e:	2202      	movs	r2, #2
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002646:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	fa93 f2a3 	rbit	r2, r3
 8002650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002654:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002658:	601a      	str	r2, [r3, #0]
  return result;
 800265a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800265e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002662:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002664:	fab3 f383 	clz	r3, r3
 8002668:	b2db      	uxtb	r3, r3
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f043 0302 	orr.w	r3, r3, #2
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d102      	bne.n	800267e <HAL_RCC_OscConfig+0xa3a>
 8002678:	4b42      	ldr	r3, [pc, #264]	; (8002784 <HAL_RCC_OscConfig+0xb40>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	e013      	b.n	80026a6 <HAL_RCC_OscConfig+0xa62>
 800267e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002682:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002686:	2202      	movs	r2, #2
 8002688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	fa93 f2a3 	rbit	r2, r3
 8002698:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800269c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	4b38      	ldr	r3, [pc, #224]	; (8002784 <HAL_RCC_OscConfig+0xb40>)
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80026ae:	2102      	movs	r1, #2
 80026b0:	6011      	str	r1, [r2, #0]
 80026b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026b6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	fa92 f1a2 	rbit	r1, r2
 80026c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026c4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80026c8:	6011      	str	r1, [r2, #0]
  return result;
 80026ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026ce:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	fab2 f282 	clz	r2, r2
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	f002 021f 	and.w	r2, r2, #31
 80026e4:	2101      	movs	r1, #1
 80026e6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d084      	beq.n	80025fa <HAL_RCC_OscConfig+0x9b6>
 80026f0:	e083      	b.n	80027fa <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f2:	f7fe ffbd 	bl	8001670 <HAL_GetTick>
 80026f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f7fe ffb8 	bl	8001670 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	; 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e2e4      	b.n	8002cde <HAL_RCC_OscConfig+0x109a>
 8002714:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002718:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800271c:	2202      	movs	r2, #2
 800271e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002724:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	fa93 f2a3 	rbit	r2, r3
 800272e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002732:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800273c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002740:	2202      	movs	r2, #2
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002748:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	fa93 f2a3 	rbit	r2, r3
 8002752:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002756:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800275a:	601a      	str	r2, [r3, #0]
  return result;
 800275c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002760:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002764:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	095b      	lsrs	r3, r3, #5
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f043 0302 	orr.w	r3, r3, #2
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d106      	bne.n	8002788 <HAL_RCC_OscConfig+0xb44>
 800277a:	4b02      	ldr	r3, [pc, #8]	; (8002784 <HAL_RCC_OscConfig+0xb40>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	e017      	b.n	80027b0 <HAL_RCC_OscConfig+0xb6c>
 8002780:	40007000 	.word	0x40007000
 8002784:	40021000 	.word	0x40021000
 8002788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800278c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002790:	2202      	movs	r2, #2
 8002792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002798:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	fa93 f2a3 	rbit	r2, r3
 80027a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	4bb3      	ldr	r3, [pc, #716]	; (8002a7c <HAL_RCC_OscConfig+0xe38>)
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80027b8:	2102      	movs	r1, #2
 80027ba:	6011      	str	r1, [r2, #0]
 80027bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027c0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	fa92 f1a2 	rbit	r1, r2
 80027ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027ce:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80027d2:	6011      	str	r1, [r2, #0]
  return result;
 80027d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027d8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	fab2 f282 	clz	r2, r2
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	f002 021f 	and.w	r2, r2, #31
 80027ee:	2101      	movs	r1, #1
 80027f0:	fa01 f202 	lsl.w	r2, r1, r2
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d180      	bne.n	80026fc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027fa:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d105      	bne.n	800280e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002802:	4b9e      	ldr	r3, [pc, #632]	; (8002a7c <HAL_RCC_OscConfig+0xe38>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4a9d      	ldr	r2, [pc, #628]	; (8002a7c <HAL_RCC_OscConfig+0xe38>)
 8002808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800280c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800280e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002812:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 825e 	beq.w	8002cdc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002820:	4b96      	ldr	r3, [pc, #600]	; (8002a7c <HAL_RCC_OscConfig+0xe38>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	2b08      	cmp	r3, #8
 800282a:	f000 821f 	beq.w	8002c6c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002832:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b02      	cmp	r3, #2
 800283c:	f040 8170 	bne.w	8002b20 <HAL_RCC_OscConfig+0xedc>
 8002840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002844:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002848:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800284c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002852:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	fa93 f2a3 	rbit	r2, r3
 800285c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002860:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002864:	601a      	str	r2, [r3, #0]
  return result;
 8002866:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800286a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800286e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002870:	fab3 f383 	clz	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800287a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	461a      	mov	r2, r3
 8002882:	2300      	movs	r3, #0
 8002884:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002886:	f7fe fef3 	bl	8001670 <HAL_GetTick>
 800288a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288e:	e009      	b.n	80028a4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002890:	f7fe feee 	bl	8001670 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e21c      	b.n	8002cde <HAL_RCC_OscConfig+0x109a>
 80028a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80028ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	fa93 f2a3 	rbit	r2, r3
 80028c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80028c8:	601a      	str	r2, [r3, #0]
  return result;
 80028ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ce:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80028d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d102      	bne.n	80028ee <HAL_RCC_OscConfig+0xcaa>
 80028e8:	4b64      	ldr	r3, [pc, #400]	; (8002a7c <HAL_RCC_OscConfig+0xe38>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	e027      	b.n	800293e <HAL_RCC_OscConfig+0xcfa>
 80028ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80028f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002900:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	fa93 f2a3 	rbit	r2, r3
 800290a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800290e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002918:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800291c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002926:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	fa93 f2a3 	rbit	r2, r3
 8002930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002934:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <HAL_RCC_OscConfig+0xe38>)
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002942:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002946:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800294a:	6011      	str	r1, [r2, #0]
 800294c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002950:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	fa92 f1a2 	rbit	r1, r2
 800295a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800295e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002962:	6011      	str	r1, [r2, #0]
  return result;
 8002964:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002968:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	fab2 f282 	clz	r2, r2
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	f042 0220 	orr.w	r2, r2, #32
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	f002 021f 	and.w	r2, r2, #31
 800297e:	2101      	movs	r1, #1
 8002980:	fa01 f202 	lsl.w	r2, r1, r2
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d182      	bne.n	8002890 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800298a:	4b3c      	ldr	r3, [pc, #240]	; (8002a7c <HAL_RCC_OscConfig+0xe38>)
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	f023 020f 	bic.w	r2, r3, #15
 8002992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002996:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	4937      	ldr	r1, [pc, #220]	; (8002a7c <HAL_RCC_OscConfig+0xe38>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80029a4:	4b35      	ldr	r3, [pc, #212]	; (8002a7c <HAL_RCC_OscConfig+0xe38>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80029ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6a19      	ldr	r1, [r3, #32]
 80029b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	492d      	ldr	r1, [pc, #180]	; (8002a7c <HAL_RCC_OscConfig+0xe38>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]
 80029cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80029d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029de:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	fa93 f2a3 	rbit	r2, r3
 80029e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ec:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80029f0:	601a      	str	r2, [r3, #0]
  return result;
 80029f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80029fa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029fc:	fab3 f383 	clz	r3, r3
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2301      	movs	r3, #1
 8002a10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a12:	f7fe fe2d 	bl	8001670 <HAL_GetTick>
 8002a16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a1a:	e009      	b.n	8002a30 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe fe28 	bl	8001670 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e156      	b.n	8002cde <HAL_RCC_OscConfig+0x109a>
 8002a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a34:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002a38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a42:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	fa93 f2a3 	rbit	r2, r3
 8002a4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a50:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a54:	601a      	str	r2, [r3, #0]
  return result;
 8002a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a5a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d105      	bne.n	8002a80 <HAL_RCC_OscConfig+0xe3c>
 8002a74:	4b01      	ldr	r3, [pc, #4]	; (8002a7c <HAL_RCC_OscConfig+0xe38>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	e02a      	b.n	8002ad0 <HAL_RCC_OscConfig+0xe8c>
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a84:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a92:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	fa93 f2a3 	rbit	r2, r3
 8002a9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aaa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002aae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	fa93 f2a3 	rbit	r2, r3
 8002ac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	4b86      	ldr	r3, [pc, #536]	; (8002ce8 <HAL_RCC_OscConfig+0x10a4>)
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ad4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ad8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002adc:	6011      	str	r1, [r2, #0]
 8002ade:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ae2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	fa92 f1a2 	rbit	r1, r2
 8002aec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002af0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002af4:	6011      	str	r1, [r2, #0]
  return result;
 8002af6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002afa:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	fab2 f282 	clz	r2, r2
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	f042 0220 	orr.w	r2, r2, #32
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	f002 021f 	and.w	r2, r2, #31
 8002b10:	2101      	movs	r1, #1
 8002b12:	fa01 f202 	lsl.w	r2, r1, r2
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f43f af7f 	beq.w	8002a1c <HAL_RCC_OscConfig+0xdd8>
 8002b1e:	e0dd      	b.n	8002cdc <HAL_RCC_OscConfig+0x1098>
 8002b20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b24:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b32:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	fa93 f2a3 	rbit	r2, r3
 8002b3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b40:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b44:	601a      	str	r2, [r3, #0]
  return result;
 8002b46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b4a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b4e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b50:	fab3 f383 	clz	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	461a      	mov	r2, r3
 8002b62:	2300      	movs	r3, #0
 8002b64:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7fe fd83 	bl	8001670 <HAL_GetTick>
 8002b6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6e:	e009      	b.n	8002b84 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b70:	f7fe fd7e 	bl	8001670 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e0ac      	b.n	8002cde <HAL_RCC_OscConfig+0x109a>
 8002b84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b88:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b96:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	fa93 f2a3 	rbit	r2, r3
 8002ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ba8:	601a      	str	r2, [r3, #0]
  return result;
 8002baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002bb2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d102      	bne.n	8002bce <HAL_RCC_OscConfig+0xf8a>
 8002bc8:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <HAL_RCC_OscConfig+0x10a4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	e027      	b.n	8002c1e <HAL_RCC_OscConfig+0xfda>
 8002bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002bd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	fa93 f2a3 	rbit	r2, r3
 8002bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002bfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c06:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	fa93 f2a3 	rbit	r2, r3
 8002c10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c14:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	4b33      	ldr	r3, [pc, #204]	; (8002ce8 <HAL_RCC_OscConfig+0x10a4>)
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c22:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002c26:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c2a:	6011      	str	r1, [r2, #0]
 8002c2c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c30:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	fa92 f1a2 	rbit	r1, r2
 8002c3a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c3e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002c42:	6011      	str	r1, [r2, #0]
  return result;
 8002c44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c48:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	fab2 f282 	clz	r2, r2
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	f042 0220 	orr.w	r2, r2, #32
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	f002 021f 	and.w	r2, r2, #31
 8002c5e:	2101      	movs	r1, #1
 8002c60:	fa01 f202 	lsl.w	r2, r1, r2
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d182      	bne.n	8002b70 <HAL_RCC_OscConfig+0xf2c>
 8002c6a:	e037      	b.n	8002cdc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e02e      	b.n	8002cde <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_RCC_OscConfig+0x10a4>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002c88:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <HAL_RCC_OscConfig+0x10a4>)
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002c94:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d117      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ca8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002cac:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002cc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cc4:	f003 020f 	and.w	r2, r3, #15
 8002cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ccc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000

08002cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b09e      	sub	sp, #120	; 0x78
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e162      	b.n	8002fca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d04:	4b90      	ldr	r3, [pc, #576]	; (8002f48 <HAL_RCC_ClockConfig+0x25c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d910      	bls.n	8002d34 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b8d      	ldr	r3, [pc, #564]	; (8002f48 <HAL_RCC_ClockConfig+0x25c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 0207 	bic.w	r2, r3, #7
 8002d1a:	498b      	ldr	r1, [pc, #556]	; (8002f48 <HAL_RCC_ClockConfig+0x25c>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b89      	ldr	r3, [pc, #548]	; (8002f48 <HAL_RCC_ClockConfig+0x25c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e14a      	b.n	8002fca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d40:	4b82      	ldr	r3, [pc, #520]	; (8002f4c <HAL_RCC_ClockConfig+0x260>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	497f      	ldr	r1, [pc, #508]	; (8002f4c <HAL_RCC_ClockConfig+0x260>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 80dc 	beq.w	8002f18 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d13c      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xf6>
 8002d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d6c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d78:	fab3 f383 	clz	r3, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d102      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xa6>
 8002d8c:	4b6f      	ldr	r3, [pc, #444]	; (8002f4c <HAL_RCC_ClockConfig+0x260>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	e00f      	b.n	8002db2 <HAL_RCC_ClockConfig+0xc6>
 8002d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	667b      	str	r3, [r7, #100]	; 0x64
 8002da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002da4:	663b      	str	r3, [r7, #96]	; 0x60
 8002da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dae:	4b67      	ldr	r3, [pc, #412]	; (8002f4c <HAL_RCC_ClockConfig+0x260>)
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002db6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002db8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dba:	fa92 f2a2 	rbit	r2, r2
 8002dbe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002dc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002dc2:	fab2 f282 	clz	r2, r2
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	f042 0220 	orr.w	r2, r2, #32
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f002 021f 	and.w	r2, r2, #31
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d17b      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e0f3      	b.n	8002fca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d13c      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x178>
 8002dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d102      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x128>
 8002e0e:	4b4f      	ldr	r3, [pc, #316]	; (8002f4c <HAL_RCC_ClockConfig+0x260>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	e00f      	b.n	8002e34 <HAL_RCC_ClockConfig+0x148>
 8002e14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	647b      	str	r3, [r7, #68]	; 0x44
 8002e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e26:	643b      	str	r3, [r7, #64]	; 0x40
 8002e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e30:	4b46      	ldr	r3, [pc, #280]	; (8002f4c <HAL_RCC_ClockConfig+0x260>)
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e38:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e3c:	fa92 f2a2 	rbit	r2, r2
 8002e40:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e44:	fab2 f282 	clz	r2, r2
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	f042 0220 	orr.w	r2, r2, #32
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	f002 021f 	and.w	r2, r2, #31
 8002e54:	2101      	movs	r1, #1
 8002e56:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d13a      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0b2      	b.n	8002fca <HAL_RCC_ClockConfig+0x2de>
 8002e64:	2302      	movs	r3, #2
 8002e66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	095b      	lsrs	r3, r3, #5
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d102      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x1a0>
 8002e86:	4b31      	ldr	r3, [pc, #196]	; (8002f4c <HAL_RCC_ClockConfig+0x260>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	e00d      	b.n	8002ea8 <HAL_RCC_ClockConfig+0x1bc>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
 8002e98:	2302      	movs	r3, #2
 8002e9a:	623b      	str	r3, [r7, #32]
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	4b29      	ldr	r3, [pc, #164]	; (8002f4c <HAL_RCC_ClockConfig+0x260>)
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	61ba      	str	r2, [r7, #24]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	fa92 f2a2 	rbit	r2, r2
 8002eb2:	617a      	str	r2, [r7, #20]
  return result;
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	fab2 f282 	clz	r2, r2
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	f042 0220 	orr.w	r2, r2, #32
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	f002 021f 	and.w	r2, r2, #31
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e079      	b.n	8002fca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_RCC_ClockConfig+0x260>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f023 0203 	bic.w	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	491a      	ldr	r1, [pc, #104]	; (8002f4c <HAL_RCC_ClockConfig+0x260>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee8:	f7fe fbc2 	bl	8001670 <HAL_GetTick>
 8002eec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef0:	f7fe fbbe 	bl	8001670 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e061      	b.n	8002fca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f06:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <HAL_RCC_ClockConfig+0x260>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 020c 	and.w	r2, r3, #12
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d1eb      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_ClockConfig+0x25c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d214      	bcs.n	8002f50 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <HAL_RCC_ClockConfig+0x25c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 0207 	bic.w	r2, r3, #7
 8002f2e:	4906      	ldr	r1, [pc, #24]	; (8002f48 <HAL_RCC_ClockConfig+0x25c>)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f36:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <HAL_RCC_ClockConfig+0x25c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e040      	b.n	8002fca <HAL_RCC_ClockConfig+0x2de>
 8002f48:	40022000 	.word	0x40022000
 8002f4c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	491a      	ldr	r1, [pc, #104]	; (8002fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d009      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f7a:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4912      	ldr	r1, [pc, #72]	; (8002fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f8e:	f000 f829 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 8002f92:	4601      	mov	r1, r0
 8002f94:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f9c:	22f0      	movs	r2, #240	; 0xf0
 8002f9e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	fa92 f2a2 	rbit	r2, r2
 8002fa6:	60fa      	str	r2, [r7, #12]
  return result;
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	fab2 f282 	clz	r2, r2
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	40d3      	lsrs	r3, r2
 8002fb2:	4a09      	ldr	r2, [pc, #36]	; (8002fd8 <HAL_RCC_ClockConfig+0x2ec>)
 8002fb4:	5cd3      	ldrb	r3, [r2, r3]
 8002fb6:	fa21 f303 	lsr.w	r3, r1, r3
 8002fba:	4a08      	ldr	r2, [pc, #32]	; (8002fdc <HAL_RCC_ClockConfig+0x2f0>)
 8002fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002fbe:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <HAL_RCC_ClockConfig+0x2f4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe fb10 	bl	80015e8 <HAL_InitTick>
  
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3778      	adds	r7, #120	; 0x78
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	080047b8 	.word	0x080047b8
 8002fdc:	20000010 	.word	0x20000010
 8002fe0:	20000014 	.word	0x20000014

08002fe4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b08b      	sub	sp, #44	; 0x2c
 8002fe8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ffe:	4b2a      	ldr	r3, [pc, #168]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b04      	cmp	r3, #4
 800300c:	d002      	beq.n	8003014 <HAL_RCC_GetSysClockFreq+0x30>
 800300e:	2b08      	cmp	r3, #8
 8003010:	d003      	beq.n	800301a <HAL_RCC_GetSysClockFreq+0x36>
 8003012:	e03f      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003014:	4b25      	ldr	r3, [pc, #148]	; (80030ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8003016:	623b      	str	r3, [r7, #32]
      break;
 8003018:	e03f      	b.n	800309a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003020:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003024:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	fa92 f2a2 	rbit	r2, r2
 800302c:	607a      	str	r2, [r7, #4]
  return result;
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	fab2 f282 	clz	r2, r2
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	40d3      	lsrs	r3, r2
 8003038:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800303a:	5cd3      	ldrb	r3, [r2, r3]
 800303c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800303e:	4b1a      	ldr	r3, [pc, #104]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	220f      	movs	r2, #15
 8003048:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	fa92 f2a2 	rbit	r2, r2
 8003050:	60fa      	str	r2, [r7, #12]
  return result;
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	fab2 f282 	clz	r2, r2
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	40d3      	lsrs	r3, r2
 800305c:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800305e:	5cd3      	ldrb	r3, [r2, r3]
 8003060:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800306c:	4a0f      	ldr	r2, [pc, #60]	; (80030ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	fbb2 f2f3 	udiv	r2, r2, r3
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
 800307c:	e007      	b.n	800308e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800307e:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	fbb2 f2f3 	udiv	r2, r2, r3
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	fb02 f303 	mul.w	r3, r2, r3
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	623b      	str	r3, [r7, #32]
      break;
 8003092:	e002      	b.n	800309a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8003096:	623b      	str	r3, [r7, #32]
      break;
 8003098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800309a:	6a3b      	ldr	r3, [r7, #32]
}
 800309c:	4618      	mov	r0, r3
 800309e:	372c      	adds	r7, #44	; 0x2c
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40021000 	.word	0x40021000
 80030ac:	007a1200 	.word	0x007a1200
 80030b0:	080047d0 	.word	0x080047d0
 80030b4:	080047e0 	.word	0x080047e0

080030b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <HAL_RCC_GetHCLKFreq+0x14>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	20000010 	.word	0x20000010

080030d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80030d6:	f7ff ffef 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 80030da:	4601      	mov	r1, r0
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030e4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80030e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	fa92 f2a2 	rbit	r2, r2
 80030f0:	603a      	str	r2, [r7, #0]
  return result;
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	fab2 f282 	clz	r2, r2
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	40d3      	lsrs	r3, r2
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030fe:	5cd3      	ldrb	r3, [r2, r3]
 8003100:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40021000 	.word	0x40021000
 8003110:	080047c8 	.word	0x080047c8

08003114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800311a:	f7ff ffcd 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 800311e:	4601      	mov	r1, r0
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003128:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800312c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	fa92 f2a2 	rbit	r2, r2
 8003134:	603a      	str	r2, [r7, #0]
  return result;
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	fab2 f282 	clz	r2, r2
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	40d3      	lsrs	r3, r2
 8003140:	4a04      	ldr	r2, [pc, #16]	; (8003154 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003142:	5cd3      	ldrb	r3, [r2, r3]
 8003144:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	080047c8 	.word	0x080047c8

08003158 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b092      	sub	sp, #72	; 0x48
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003168:	2300      	movs	r3, #0
 800316a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 80d4 	beq.w	8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317c:	4b4e      	ldr	r3, [pc, #312]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10e      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003188:	4b4b      	ldr	r3, [pc, #300]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	4a4a      	ldr	r2, [pc, #296]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003192:	61d3      	str	r3, [r2, #28]
 8003194:	4b48      	ldr	r3, [pc, #288]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a0:	2301      	movs	r3, #1
 80031a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a6:	4b45      	ldr	r3, [pc, #276]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d118      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b2:	4b42      	ldr	r3, [pc, #264]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a41      	ldr	r2, [pc, #260]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031be:	f7fe fa57 	bl	8001670 <HAL_GetTick>
 80031c2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	e008      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c6:	f7fe fa53 	bl	8001670 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b64      	cmp	r3, #100	; 0x64
 80031d2:	d901      	bls.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e1d6      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d8:	4b38      	ldr	r3, [pc, #224]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031e4:	4b34      	ldr	r3, [pc, #208]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 8084 	beq.w	80032fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003200:	429a      	cmp	r2, r3
 8003202:	d07c      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003204:	4b2c      	ldr	r3, [pc, #176]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800320e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003212:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	461a      	mov	r2, r3
 800322e:	2301      	movs	r3, #1
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003236:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	461a      	mov	r2, r3
 8003252:	2300      	movs	r3, #0
 8003254:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003256:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800325c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d04b      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7fe fa03 	bl	8001670 <HAL_GetTick>
 800326a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326c:	e00a      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7fe f9ff 	bl	8001670 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	; 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e180      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003284:	2302      	movs	r3, #2
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
 8003290:	2302      	movs	r3, #2
 8003292:	623b      	str	r3, [r7, #32]
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	fa93 f3a3 	rbit	r3, r3
 800329a:	61fb      	str	r3, [r7, #28]
  return result;
 800329c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	f043 0302 	orr.w	r3, r3, #2
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d108      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80032b2:	4b01      	ldr	r3, [pc, #4]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	e00d      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40007000 	.word	0x40007000
 80032c0:	10908100 	.word	0x10908100
 80032c4:	2302      	movs	r3, #2
 80032c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	4b9a      	ldr	r3, [pc, #616]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	2202      	movs	r2, #2
 80032d6:	613a      	str	r2, [r7, #16]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	fa92 f2a2 	rbit	r2, r2
 80032de:	60fa      	str	r2, [r7, #12]
  return result;
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	fab2 f282 	clz	r2, r2
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	f002 021f 	and.w	r2, r2, #31
 80032f2:	2101      	movs	r1, #1
 80032f4:	fa01 f202 	lsl.w	r2, r1, r2
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0b7      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80032fe:	4b8f      	ldr	r3, [pc, #572]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	498c      	ldr	r1, [pc, #560]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800330c:	4313      	orrs	r3, r2
 800330e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003310:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003314:	2b01      	cmp	r3, #1
 8003316:	d105      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003318:	4b88      	ldr	r3, [pc, #544]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	4a87      	ldr	r2, [pc, #540]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800331e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003322:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003330:	4b82      	ldr	r3, [pc, #520]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	f023 0203 	bic.w	r2, r3, #3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	497f      	ldr	r1, [pc, #508]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800333e:	4313      	orrs	r3, r2
 8003340:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800334e:	4b7b      	ldr	r3, [pc, #492]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	4978      	ldr	r1, [pc, #480]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800335c:	4313      	orrs	r3, r2
 800335e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800336c:	4b73      	ldr	r3, [pc, #460]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	4970      	ldr	r1, [pc, #448]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800338a:	4b6c      	ldr	r3, [pc, #432]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f023 0210 	bic.w	r2, r3, #16
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	4969      	ldr	r1, [pc, #420]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003398:	4313      	orrs	r3, r2
 800339a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80033a8:	4b64      	ldr	r3, [pc, #400]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b4:	4961      	ldr	r1, [pc, #388]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033c6:	4b5d      	ldr	r3, [pc, #372]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f023 0220 	bic.w	r2, r3, #32
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	495a      	ldr	r1, [pc, #360]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033e4:	4b55      	ldr	r3, [pc, #340]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	4952      	ldr	r1, [pc, #328]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003402:	4b4e      	ldr	r3, [pc, #312]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	494b      	ldr	r1, [pc, #300]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003410:	4313      	orrs	r3, r2
 8003412:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003420:	4b46      	ldr	r3, [pc, #280]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	4943      	ldr	r1, [pc, #268]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800343a:	2b00      	cmp	r3, #0
 800343c:	d008      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800343e:	4b3f      	ldr	r3, [pc, #252]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	493c      	ldr	r1, [pc, #240]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800345c:	4b37      	ldr	r3, [pc, #220]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	4934      	ldr	r1, [pc, #208]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800346a:	4313      	orrs	r3, r2
 800346c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d008      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800347a:	4b30      	ldr	r3, [pc, #192]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	492d      	ldr	r1, [pc, #180]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003488:	4313      	orrs	r3, r2
 800348a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003498:	4b28      	ldr	r3, [pc, #160]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a4:	4925      	ldr	r1, [pc, #148]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80034b6:	4b21      	ldr	r3, [pc, #132]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	491e      	ldr	r1, [pc, #120]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80034d4:	4b19      	ldr	r3, [pc, #100]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	4916      	ldr	r1, [pc, #88]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80034f2:	4b12      	ldr	r3, [pc, #72]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fe:	490f      	ldr	r1, [pc, #60]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003500:	4313      	orrs	r3, r2
 8003502:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	4907      	ldr	r1, [pc, #28]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800351e:	4313      	orrs	r3, r2
 8003520:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00c      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800352e:	4b03      	ldr	r3, [pc, #12]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	e002      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003542:	4913      	ldr	r1, [pc, #76]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003544:	4313      	orrs	r3, r2
 8003546:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003554:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003560:	490b      	ldr	r1, [pc, #44]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003562:	4313      	orrs	r3, r2
 8003564:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d008      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003572:	4b07      	ldr	r3, [pc, #28]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357e:	4904      	ldr	r1, [pc, #16]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003580:	4313      	orrs	r3, r2
 8003582:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3748      	adds	r7, #72	; 0x48
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000

08003594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e049      	b.n	800363a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd ff00 	bl	80013c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3304      	adds	r3, #4
 80035d0:	4619      	mov	r1, r3
 80035d2:	4610      	mov	r0, r2
 80035d4:	f000 f968 	bl	80038a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	d001      	beq.n	800365c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e047      	b.n	80036ec <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a23      	ldr	r2, [pc, #140]	; (80036f8 <HAL_TIM_Base_Start+0xb4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01d      	beq.n	80036aa <HAL_TIM_Base_Start+0x66>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003676:	d018      	beq.n	80036aa <HAL_TIM_Base_Start+0x66>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <HAL_TIM_Base_Start+0xb8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d013      	beq.n	80036aa <HAL_TIM_Base_Start+0x66>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1e      	ldr	r2, [pc, #120]	; (8003700 <HAL_TIM_Base_Start+0xbc>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00e      	beq.n	80036aa <HAL_TIM_Base_Start+0x66>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <HAL_TIM_Base_Start+0xc0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d009      	beq.n	80036aa <HAL_TIM_Base_Start+0x66>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <HAL_TIM_Base_Start+0xc4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d004      	beq.n	80036aa <HAL_TIM_Base_Start+0x66>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a19      	ldr	r2, [pc, #100]	; (800370c <HAL_TIM_Base_Start+0xc8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d115      	bne.n	80036d6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	4b17      	ldr	r3, [pc, #92]	; (8003710 <HAL_TIM_Base_Start+0xcc>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2b06      	cmp	r3, #6
 80036ba:	d015      	beq.n	80036e8 <HAL_TIM_Base_Start+0xa4>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c2:	d011      	beq.n	80036e8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d4:	e008      	b.n	80036e8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0201 	orr.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	e000      	b.n	80036ea <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	40012c00 	.word	0x40012c00
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800
 8003704:	40013400 	.word	0x40013400
 8003708:	40014000 	.word	0x40014000
 800370c:	40015000 	.word	0x40015000
 8003710:	00010007 	.word	0x00010007

08003714 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_TIM_ConfigClockSource+0x1c>
 800372c:	2302      	movs	r3, #2
 800372e:	e0b6      	b.n	800389e <HAL_TIM_ConfigClockSource+0x18a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800375a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376c:	d03e      	beq.n	80037ec <HAL_TIM_ConfigClockSource+0xd8>
 800376e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003772:	f200 8087 	bhi.w	8003884 <HAL_TIM_ConfigClockSource+0x170>
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377a:	f000 8086 	beq.w	800388a <HAL_TIM_ConfigClockSource+0x176>
 800377e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003782:	d87f      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x170>
 8003784:	2b70      	cmp	r3, #112	; 0x70
 8003786:	d01a      	beq.n	80037be <HAL_TIM_ConfigClockSource+0xaa>
 8003788:	2b70      	cmp	r3, #112	; 0x70
 800378a:	d87b      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x170>
 800378c:	2b60      	cmp	r3, #96	; 0x60
 800378e:	d050      	beq.n	8003832 <HAL_TIM_ConfigClockSource+0x11e>
 8003790:	2b60      	cmp	r3, #96	; 0x60
 8003792:	d877      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x170>
 8003794:	2b50      	cmp	r3, #80	; 0x50
 8003796:	d03c      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0xfe>
 8003798:	2b50      	cmp	r3, #80	; 0x50
 800379a:	d873      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x170>
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d058      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x13e>
 80037a0:	2b40      	cmp	r3, #64	; 0x40
 80037a2:	d86f      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x170>
 80037a4:	2b30      	cmp	r3, #48	; 0x30
 80037a6:	d064      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x15e>
 80037a8:	2b30      	cmp	r3, #48	; 0x30
 80037aa:	d86b      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x170>
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d060      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x15e>
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d867      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x170>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d05c      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x15e>
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d05a      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x15e>
 80037bc:	e062      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037ce:	f000 f983 	bl	8003ad8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	609a      	str	r2, [r3, #8]
      break;
 80037ea:	e04f      	b.n	800388c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037fc:	f000 f96c 	bl	8003ad8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800380e:	609a      	str	r2, [r3, #8]
      break;
 8003810:	e03c      	b.n	800388c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800381e:	461a      	mov	r2, r3
 8003820:	f000 f8e0 	bl	80039e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2150      	movs	r1, #80	; 0x50
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f939 	bl	8003aa2 <TIM_ITRx_SetConfig>
      break;
 8003830:	e02c      	b.n	800388c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800383e:	461a      	mov	r2, r3
 8003840:	f000 f8ff 	bl	8003a42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2160      	movs	r1, #96	; 0x60
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f929 	bl	8003aa2 <TIM_ITRx_SetConfig>
      break;
 8003850:	e01c      	b.n	800388c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800385e:	461a      	mov	r2, r3
 8003860:	f000 f8c0 	bl	80039e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2140      	movs	r1, #64	; 0x40
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f919 	bl	8003aa2 <TIM_ITRx_SetConfig>
      break;
 8003870:	e00c      	b.n	800388c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f000 f910 	bl	8003aa2 <TIM_ITRx_SetConfig>
      break;
 8003882:	e003      	b.n	800388c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
      break;
 8003888:	e000      	b.n	800388c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800388a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800389c:	7bfb      	ldrb	r3, [r7, #15]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a42      	ldr	r2, [pc, #264]	; (80039c4 <TIM_Base_SetConfig+0x11c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d013      	beq.n	80038e8 <TIM_Base_SetConfig+0x40>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c6:	d00f      	beq.n	80038e8 <TIM_Base_SetConfig+0x40>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a3f      	ldr	r2, [pc, #252]	; (80039c8 <TIM_Base_SetConfig+0x120>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <TIM_Base_SetConfig+0x40>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a3e      	ldr	r2, [pc, #248]	; (80039cc <TIM_Base_SetConfig+0x124>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <TIM_Base_SetConfig+0x40>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a3d      	ldr	r2, [pc, #244]	; (80039d0 <TIM_Base_SetConfig+0x128>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_Base_SetConfig+0x40>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a3c      	ldr	r2, [pc, #240]	; (80039d4 <TIM_Base_SetConfig+0x12c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d108      	bne.n	80038fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a31      	ldr	r2, [pc, #196]	; (80039c4 <TIM_Base_SetConfig+0x11c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d01f      	beq.n	8003942 <TIM_Base_SetConfig+0x9a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003908:	d01b      	beq.n	8003942 <TIM_Base_SetConfig+0x9a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a2e      	ldr	r2, [pc, #184]	; (80039c8 <TIM_Base_SetConfig+0x120>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d017      	beq.n	8003942 <TIM_Base_SetConfig+0x9a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a2d      	ldr	r2, [pc, #180]	; (80039cc <TIM_Base_SetConfig+0x124>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <TIM_Base_SetConfig+0x9a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2c      	ldr	r2, [pc, #176]	; (80039d0 <TIM_Base_SetConfig+0x128>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00f      	beq.n	8003942 <TIM_Base_SetConfig+0x9a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a2c      	ldr	r2, [pc, #176]	; (80039d8 <TIM_Base_SetConfig+0x130>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00b      	beq.n	8003942 <TIM_Base_SetConfig+0x9a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a2b      	ldr	r2, [pc, #172]	; (80039dc <TIM_Base_SetConfig+0x134>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <TIM_Base_SetConfig+0x9a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a2a      	ldr	r2, [pc, #168]	; (80039e0 <TIM_Base_SetConfig+0x138>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d003      	beq.n	8003942 <TIM_Base_SetConfig+0x9a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a25      	ldr	r2, [pc, #148]	; (80039d4 <TIM_Base_SetConfig+0x12c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d108      	bne.n	8003954 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a12      	ldr	r2, [pc, #72]	; (80039c4 <TIM_Base_SetConfig+0x11c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d013      	beq.n	80039a8 <TIM_Base_SetConfig+0x100>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <TIM_Base_SetConfig+0x128>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00f      	beq.n	80039a8 <TIM_Base_SetConfig+0x100>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <TIM_Base_SetConfig+0x130>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00b      	beq.n	80039a8 <TIM_Base_SetConfig+0x100>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a12      	ldr	r2, [pc, #72]	; (80039dc <TIM_Base_SetConfig+0x134>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d007      	beq.n	80039a8 <TIM_Base_SetConfig+0x100>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a11      	ldr	r2, [pc, #68]	; (80039e0 <TIM_Base_SetConfig+0x138>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_Base_SetConfig+0x100>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a0c      	ldr	r2, [pc, #48]	; (80039d4 <TIM_Base_SetConfig+0x12c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d103      	bne.n	80039b0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	615a      	str	r2, [r3, #20]
}
 80039b6:	bf00      	nop
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40012c00 	.word	0x40012c00
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40013400 	.word	0x40013400
 80039d4:	40015000 	.word	0x40015000
 80039d8:	40014000 	.word	0x40014000
 80039dc:	40014400 	.word	0x40014400
 80039e0:	40014800 	.word	0x40014800

080039e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f023 0201 	bic.w	r2, r3, #1
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f023 030a 	bic.w	r3, r3, #10
 8003a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	621a      	str	r2, [r3, #32]
}
 8003a36:	bf00      	nop
 8003a38:	371c      	adds	r7, #28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b087      	sub	sp, #28
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	f023 0210 	bic.w	r2, r3, #16
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	031b      	lsls	r3, r3, #12
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	621a      	str	r2, [r3, #32]
}
 8003a96:	bf00      	nop
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f043 0307 	orr.w	r3, r3, #7
 8003ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	609a      	str	r2, [r3, #8]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	021a      	lsls	r2, r3, #8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e06d      	b.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a30      	ldr	r2, [pc, #192]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d009      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2f      	ldr	r2, [pc, #188]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a2d      	ldr	r2, [pc, #180]	; (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d108      	bne.n	8003b80 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1e      	ldr	r2, [pc, #120]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d01d      	beq.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bac:	d018      	beq.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1c      	ldr	r2, [pc, #112]	; (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d013      	beq.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1a      	ldr	r2, [pc, #104]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00e      	beq.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a15      	ldr	r2, [pc, #84]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d009      	beq.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d004      	beq.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a11      	ldr	r2, [pc, #68]	; (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d10c      	bne.n	8003bfa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40013400 	.word	0x40013400
 8003c20:	40015000 	.word	0x40015000
 8003c24:	40000400 	.word	0x40000400
 8003c28:	40000800 	.word	0x40000800
 8003c2c:	40014000 	.word	0x40014000

08003c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e040      	b.n	8003cc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fd fbd4 	bl	8001400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2224      	movs	r2, #36	; 0x24
 8003c5c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0201 	bic.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f82c 	bl	8003ccc <UART_SetConfig>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e022      	b.n	8003cc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f9f4 	bl	8004074 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003caa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fa7b 	bl	80041b8 <UART_CheckIdleState>
 8003cc2:	4603      	mov	r3, r0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	4b92      	ldr	r3, [pc, #584]	; (8003f40 <UART_SetConfig+0x274>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6812      	ldr	r2, [r2, #0]
 8003cfe:	6979      	ldr	r1, [r7, #20]
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a80      	ldr	r2, [pc, #512]	; (8003f44 <UART_SetConfig+0x278>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d120      	bne.n	8003d8a <UART_SetConfig+0xbe>
 8003d48:	4b7f      	ldr	r3, [pc, #508]	; (8003f48 <UART_SetConfig+0x27c>)
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d817      	bhi.n	8003d84 <UART_SetConfig+0xb8>
 8003d54:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <UART_SetConfig+0x90>)
 8003d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5a:	bf00      	nop
 8003d5c:	08003d6d 	.word	0x08003d6d
 8003d60:	08003d79 	.word	0x08003d79
 8003d64:	08003d7f 	.word	0x08003d7f
 8003d68:	08003d73 	.word	0x08003d73
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	77fb      	strb	r3, [r7, #31]
 8003d70:	e0b5      	b.n	8003ede <UART_SetConfig+0x212>
 8003d72:	2302      	movs	r3, #2
 8003d74:	77fb      	strb	r3, [r7, #31]
 8003d76:	e0b2      	b.n	8003ede <UART_SetConfig+0x212>
 8003d78:	2304      	movs	r3, #4
 8003d7a:	77fb      	strb	r3, [r7, #31]
 8003d7c:	e0af      	b.n	8003ede <UART_SetConfig+0x212>
 8003d7e:	2308      	movs	r3, #8
 8003d80:	77fb      	strb	r3, [r7, #31]
 8003d82:	e0ac      	b.n	8003ede <UART_SetConfig+0x212>
 8003d84:	2310      	movs	r3, #16
 8003d86:	77fb      	strb	r3, [r7, #31]
 8003d88:	e0a9      	b.n	8003ede <UART_SetConfig+0x212>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a6f      	ldr	r2, [pc, #444]	; (8003f4c <UART_SetConfig+0x280>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d124      	bne.n	8003dde <UART_SetConfig+0x112>
 8003d94:	4b6c      	ldr	r3, [pc, #432]	; (8003f48 <UART_SetConfig+0x27c>)
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003da0:	d011      	beq.n	8003dc6 <UART_SetConfig+0xfa>
 8003da2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003da6:	d817      	bhi.n	8003dd8 <UART_SetConfig+0x10c>
 8003da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dac:	d011      	beq.n	8003dd2 <UART_SetConfig+0x106>
 8003dae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003db2:	d811      	bhi.n	8003dd8 <UART_SetConfig+0x10c>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <UART_SetConfig+0xf4>
 8003db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dbc:	d006      	beq.n	8003dcc <UART_SetConfig+0x100>
 8003dbe:	e00b      	b.n	8003dd8 <UART_SetConfig+0x10c>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	77fb      	strb	r3, [r7, #31]
 8003dc4:	e08b      	b.n	8003ede <UART_SetConfig+0x212>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	77fb      	strb	r3, [r7, #31]
 8003dca:	e088      	b.n	8003ede <UART_SetConfig+0x212>
 8003dcc:	2304      	movs	r3, #4
 8003dce:	77fb      	strb	r3, [r7, #31]
 8003dd0:	e085      	b.n	8003ede <UART_SetConfig+0x212>
 8003dd2:	2308      	movs	r3, #8
 8003dd4:	77fb      	strb	r3, [r7, #31]
 8003dd6:	e082      	b.n	8003ede <UART_SetConfig+0x212>
 8003dd8:	2310      	movs	r3, #16
 8003dda:	77fb      	strb	r3, [r7, #31]
 8003ddc:	e07f      	b.n	8003ede <UART_SetConfig+0x212>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a5b      	ldr	r2, [pc, #364]	; (8003f50 <UART_SetConfig+0x284>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d124      	bne.n	8003e32 <UART_SetConfig+0x166>
 8003de8:	4b57      	ldr	r3, [pc, #348]	; (8003f48 <UART_SetConfig+0x27c>)
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003df0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003df4:	d011      	beq.n	8003e1a <UART_SetConfig+0x14e>
 8003df6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003dfa:	d817      	bhi.n	8003e2c <UART_SetConfig+0x160>
 8003dfc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e00:	d011      	beq.n	8003e26 <UART_SetConfig+0x15a>
 8003e02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e06:	d811      	bhi.n	8003e2c <UART_SetConfig+0x160>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <UART_SetConfig+0x148>
 8003e0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e10:	d006      	beq.n	8003e20 <UART_SetConfig+0x154>
 8003e12:	e00b      	b.n	8003e2c <UART_SetConfig+0x160>
 8003e14:	2300      	movs	r3, #0
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e061      	b.n	8003ede <UART_SetConfig+0x212>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	77fb      	strb	r3, [r7, #31]
 8003e1e:	e05e      	b.n	8003ede <UART_SetConfig+0x212>
 8003e20:	2304      	movs	r3, #4
 8003e22:	77fb      	strb	r3, [r7, #31]
 8003e24:	e05b      	b.n	8003ede <UART_SetConfig+0x212>
 8003e26:	2308      	movs	r3, #8
 8003e28:	77fb      	strb	r3, [r7, #31]
 8003e2a:	e058      	b.n	8003ede <UART_SetConfig+0x212>
 8003e2c:	2310      	movs	r3, #16
 8003e2e:	77fb      	strb	r3, [r7, #31]
 8003e30:	e055      	b.n	8003ede <UART_SetConfig+0x212>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a47      	ldr	r2, [pc, #284]	; (8003f54 <UART_SetConfig+0x288>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d124      	bne.n	8003e86 <UART_SetConfig+0x1ba>
 8003e3c:	4b42      	ldr	r3, [pc, #264]	; (8003f48 <UART_SetConfig+0x27c>)
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003e44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e48:	d011      	beq.n	8003e6e <UART_SetConfig+0x1a2>
 8003e4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e4e:	d817      	bhi.n	8003e80 <UART_SetConfig+0x1b4>
 8003e50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e54:	d011      	beq.n	8003e7a <UART_SetConfig+0x1ae>
 8003e56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e5a:	d811      	bhi.n	8003e80 <UART_SetConfig+0x1b4>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <UART_SetConfig+0x19c>
 8003e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e64:	d006      	beq.n	8003e74 <UART_SetConfig+0x1a8>
 8003e66:	e00b      	b.n	8003e80 <UART_SetConfig+0x1b4>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e037      	b.n	8003ede <UART_SetConfig+0x212>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e034      	b.n	8003ede <UART_SetConfig+0x212>
 8003e74:	2304      	movs	r3, #4
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e031      	b.n	8003ede <UART_SetConfig+0x212>
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	77fb      	strb	r3, [r7, #31]
 8003e7e:	e02e      	b.n	8003ede <UART_SetConfig+0x212>
 8003e80:	2310      	movs	r3, #16
 8003e82:	77fb      	strb	r3, [r7, #31]
 8003e84:	e02b      	b.n	8003ede <UART_SetConfig+0x212>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a33      	ldr	r2, [pc, #204]	; (8003f58 <UART_SetConfig+0x28c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d124      	bne.n	8003eda <UART_SetConfig+0x20e>
 8003e90:	4b2d      	ldr	r3, [pc, #180]	; (8003f48 <UART_SetConfig+0x27c>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003e98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e9c:	d011      	beq.n	8003ec2 <UART_SetConfig+0x1f6>
 8003e9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ea2:	d817      	bhi.n	8003ed4 <UART_SetConfig+0x208>
 8003ea4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ea8:	d011      	beq.n	8003ece <UART_SetConfig+0x202>
 8003eaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eae:	d811      	bhi.n	8003ed4 <UART_SetConfig+0x208>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <UART_SetConfig+0x1f0>
 8003eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eb8:	d006      	beq.n	8003ec8 <UART_SetConfig+0x1fc>
 8003eba:	e00b      	b.n	8003ed4 <UART_SetConfig+0x208>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e00d      	b.n	8003ede <UART_SetConfig+0x212>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	77fb      	strb	r3, [r7, #31]
 8003ec6:	e00a      	b.n	8003ede <UART_SetConfig+0x212>
 8003ec8:	2304      	movs	r3, #4
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	e007      	b.n	8003ede <UART_SetConfig+0x212>
 8003ece:	2308      	movs	r3, #8
 8003ed0:	77fb      	strb	r3, [r7, #31]
 8003ed2:	e004      	b.n	8003ede <UART_SetConfig+0x212>
 8003ed4:	2310      	movs	r3, #16
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e001      	b.n	8003ede <UART_SetConfig+0x212>
 8003eda:	2310      	movs	r3, #16
 8003edc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee6:	d16b      	bne.n	8003fc0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003ee8:	7ffb      	ldrb	r3, [r7, #31]
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d838      	bhi.n	8003f60 <UART_SetConfig+0x294>
 8003eee:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <UART_SetConfig+0x228>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f21 	.word	0x08003f21
 8003efc:	08003f29 	.word	0x08003f29
 8003f00:	08003f61 	.word	0x08003f61
 8003f04:	08003f2f 	.word	0x08003f2f
 8003f08:	08003f61 	.word	0x08003f61
 8003f0c:	08003f61 	.word	0x08003f61
 8003f10:	08003f61 	.word	0x08003f61
 8003f14:	08003f37 	.word	0x08003f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f18:	f7ff f8da 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 8003f1c:	61b8      	str	r0, [r7, #24]
        break;
 8003f1e:	e024      	b.n	8003f6a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f20:	f7ff f8f8 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 8003f24:	61b8      	str	r0, [r7, #24]
        break;
 8003f26:	e020      	b.n	8003f6a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f28:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <UART_SetConfig+0x290>)
 8003f2a:	61bb      	str	r3, [r7, #24]
        break;
 8003f2c:	e01d      	b.n	8003f6a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2e:	f7ff f859 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 8003f32:	61b8      	str	r0, [r7, #24]
        break;
 8003f34:	e019      	b.n	8003f6a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f3a:	61bb      	str	r3, [r7, #24]
        break;
 8003f3c:	e015      	b.n	8003f6a <UART_SetConfig+0x29e>
 8003f3e:	bf00      	nop
 8003f40:	efff69f3 	.word	0xefff69f3
 8003f44:	40013800 	.word	0x40013800
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40004400 	.word	0x40004400
 8003f50:	40004800 	.word	0x40004800
 8003f54:	40004c00 	.word	0x40004c00
 8003f58:	40005000 	.word	0x40005000
 8003f5c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	77bb      	strb	r3, [r7, #30]
        break;
 8003f68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d073      	beq.n	8004058 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	005a      	lsls	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	441a      	add	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b0f      	cmp	r3, #15
 8003f8a:	d916      	bls.n	8003fba <UART_SetConfig+0x2ee>
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f92:	d212      	bcs.n	8003fba <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	f023 030f 	bic.w	r3, r3, #15
 8003f9c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	89fb      	ldrh	r3, [r7, #14]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	89fa      	ldrh	r2, [r7, #14]
 8003fb6:	60da      	str	r2, [r3, #12]
 8003fb8:	e04e      	b.n	8004058 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	77bb      	strb	r3, [r7, #30]
 8003fbe:	e04b      	b.n	8004058 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fc0:	7ffb      	ldrb	r3, [r7, #31]
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d827      	bhi.n	8004016 <UART_SetConfig+0x34a>
 8003fc6:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <UART_SetConfig+0x300>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	08003ff1 	.word	0x08003ff1
 8003fd0:	08003ff9 	.word	0x08003ff9
 8003fd4:	08004001 	.word	0x08004001
 8003fd8:	08004017 	.word	0x08004017
 8003fdc:	08004007 	.word	0x08004007
 8003fe0:	08004017 	.word	0x08004017
 8003fe4:	08004017 	.word	0x08004017
 8003fe8:	08004017 	.word	0x08004017
 8003fec:	0800400f 	.word	0x0800400f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff0:	f7ff f86e 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 8003ff4:	61b8      	str	r0, [r7, #24]
        break;
 8003ff6:	e013      	b.n	8004020 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ff8:	f7ff f88c 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 8003ffc:	61b8      	str	r0, [r7, #24]
        break;
 8003ffe:	e00f      	b.n	8004020 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004000:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <UART_SetConfig+0x3a4>)
 8004002:	61bb      	str	r3, [r7, #24]
        break;
 8004004:	e00c      	b.n	8004020 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004006:	f7fe ffed 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 800400a:	61b8      	str	r0, [r7, #24]
        break;
 800400c:	e008      	b.n	8004020 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800400e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004012:	61bb      	str	r3, [r7, #24]
        break;
 8004014:	e004      	b.n	8004020 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	77bb      	strb	r3, [r7, #30]
        break;
 800401e:	bf00      	nop
    }

    if (pclk != 0U)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d018      	beq.n	8004058 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	085a      	lsrs	r2, r3, #1
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	441a      	add	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	fbb2 f3f3 	udiv	r3, r2, r3
 8004038:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	2b0f      	cmp	r3, #15
 800403e:	d909      	bls.n	8004054 <UART_SetConfig+0x388>
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004046:	d205      	bcs.n	8004054 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	b29a      	uxth	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60da      	str	r2, [r3, #12]
 8004052:	e001      	b.n	8004058 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004064:	7fbb      	ldrb	r3, [r7, #30]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3720      	adds	r7, #32
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	007a1200 	.word	0x007a1200

08004074 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01a      	beq.n	800418a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004172:	d10a      	bne.n	800418a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
  }
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b098      	sub	sp, #96	; 0x60
 80041bc:	af02      	add	r7, sp, #8
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041c8:	f7fd fa52 	bl	8001670 <HAL_GetTick>
 80041cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d12e      	bne.n	800423a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e4:	2200      	movs	r2, #0
 80041e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f88c 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d021      	beq.n	800423a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800420a:	653b      	str	r3, [r7, #80]	; 0x50
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004214:	647b      	str	r3, [r7, #68]	; 0x44
 8004216:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800421a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800421c:	e841 2300 	strex	r3, r2, [r1]
 8004220:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e6      	bne.n	80041f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e062      	b.n	8004300 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b04      	cmp	r3, #4
 8004246:	d149      	bne.n	80042dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004250:	2200      	movs	r2, #0
 8004252:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f856 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d03c      	beq.n	80042dc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	e853 3f00 	ldrex	r3, [r3]
 800426e:	623b      	str	r3, [r7, #32]
   return(result);
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004280:	633b      	str	r3, [r7, #48]	; 0x30
 8004282:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e6      	bne.n	8004262 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3308      	adds	r3, #8
 800429a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3308      	adds	r3, #8
 80042b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042b4:	61fa      	str	r2, [r7, #28]
 80042b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	69b9      	ldr	r1, [r7, #24]
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	617b      	str	r3, [r7, #20]
   return(result);
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e5      	bne.n	8004294 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e011      	b.n	8004300 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3758      	adds	r7, #88	; 0x58
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004318:	e049      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d045      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004322:	f7fd f9a5 	bl	8001670 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <UART_WaitOnFlagUntilTimeout+0x30>
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e048      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d031      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b08      	cmp	r3, #8
 8004356:	d110      	bne.n	800437a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2208      	movs	r2, #8
 800435e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f838 	bl	80043d6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2208      	movs	r2, #8
 800436a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e029      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004388:	d111      	bne.n	80043ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004392:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f81e 	bl	80043d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e00f      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4013      	ands	r3, r2
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	bf0c      	ite	eq
 80043be:	2301      	moveq	r3, #1
 80043c0:	2300      	movne	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d0a6      	beq.n	800431a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b095      	sub	sp, #84	; 0x54
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043fc:	643b      	str	r3, [r7, #64]	; 0x40
 80043fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e6      	bne.n	80043de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3308      	adds	r3, #8
 8004416:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	64bb      	str	r3, [r7, #72]	; 0x48
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3308      	adds	r3, #8
 800442e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004430:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004432:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e5      	bne.n	8004410 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004448:	2b01      	cmp	r3, #1
 800444a:	d118      	bne.n	800447e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	60bb      	str	r3, [r7, #8]
   return(result);
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f023 0310 	bic.w	r3, r3, #16
 8004460:	647b      	str	r3, [r7, #68]	; 0x44
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800446a:	61bb      	str	r3, [r7, #24]
 800446c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	6979      	ldr	r1, [r7, #20]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	613b      	str	r3, [r7, #16]
   return(result);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e6      	bne.n	800444c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004492:	bf00      	nop
 8004494:	3754      	adds	r7, #84	; 0x54
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <malloc>:
 80044a0:	4b02      	ldr	r3, [pc, #8]	; (80044ac <malloc+0xc>)
 80044a2:	4601      	mov	r1, r0
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	f000 b823 	b.w	80044f0 <_malloc_r>
 80044aa:	bf00      	nop
 80044ac:	20000068 	.word	0x20000068

080044b0 <sbrk_aligned>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	4e0e      	ldr	r6, [pc, #56]	; (80044ec <sbrk_aligned+0x3c>)
 80044b4:	460c      	mov	r4, r1
 80044b6:	6831      	ldr	r1, [r6, #0]
 80044b8:	4605      	mov	r5, r0
 80044ba:	b911      	cbnz	r1, 80044c2 <sbrk_aligned+0x12>
 80044bc:	f000 f8ac 	bl	8004618 <_sbrk_r>
 80044c0:	6030      	str	r0, [r6, #0]
 80044c2:	4621      	mov	r1, r4
 80044c4:	4628      	mov	r0, r5
 80044c6:	f000 f8a7 	bl	8004618 <_sbrk_r>
 80044ca:	1c43      	adds	r3, r0, #1
 80044cc:	d00a      	beq.n	80044e4 <sbrk_aligned+0x34>
 80044ce:	1cc4      	adds	r4, r0, #3
 80044d0:	f024 0403 	bic.w	r4, r4, #3
 80044d4:	42a0      	cmp	r0, r4
 80044d6:	d007      	beq.n	80044e8 <sbrk_aligned+0x38>
 80044d8:	1a21      	subs	r1, r4, r0
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 f89c 	bl	8004618 <_sbrk_r>
 80044e0:	3001      	adds	r0, #1
 80044e2:	d101      	bne.n	80044e8 <sbrk_aligned+0x38>
 80044e4:	f04f 34ff 	mov.w	r4, #4294967295
 80044e8:	4620      	mov	r0, r4
 80044ea:	bd70      	pop	{r4, r5, r6, pc}
 80044ec:	2000017c 	.word	0x2000017c

080044f0 <_malloc_r>:
 80044f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044f4:	1ccd      	adds	r5, r1, #3
 80044f6:	f025 0503 	bic.w	r5, r5, #3
 80044fa:	3508      	adds	r5, #8
 80044fc:	2d0c      	cmp	r5, #12
 80044fe:	bf38      	it	cc
 8004500:	250c      	movcc	r5, #12
 8004502:	2d00      	cmp	r5, #0
 8004504:	4607      	mov	r7, r0
 8004506:	db01      	blt.n	800450c <_malloc_r+0x1c>
 8004508:	42a9      	cmp	r1, r5
 800450a:	d905      	bls.n	8004518 <_malloc_r+0x28>
 800450c:	230c      	movs	r3, #12
 800450e:	603b      	str	r3, [r7, #0]
 8004510:	2600      	movs	r6, #0
 8004512:	4630      	mov	r0, r6
 8004514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004518:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80045ec <_malloc_r+0xfc>
 800451c:	f000 f868 	bl	80045f0 <__malloc_lock>
 8004520:	f8d8 3000 	ldr.w	r3, [r8]
 8004524:	461c      	mov	r4, r3
 8004526:	bb5c      	cbnz	r4, 8004580 <_malloc_r+0x90>
 8004528:	4629      	mov	r1, r5
 800452a:	4638      	mov	r0, r7
 800452c:	f7ff ffc0 	bl	80044b0 <sbrk_aligned>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	4604      	mov	r4, r0
 8004534:	d155      	bne.n	80045e2 <_malloc_r+0xf2>
 8004536:	f8d8 4000 	ldr.w	r4, [r8]
 800453a:	4626      	mov	r6, r4
 800453c:	2e00      	cmp	r6, #0
 800453e:	d145      	bne.n	80045cc <_malloc_r+0xdc>
 8004540:	2c00      	cmp	r4, #0
 8004542:	d048      	beq.n	80045d6 <_malloc_r+0xe6>
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	4631      	mov	r1, r6
 8004548:	4638      	mov	r0, r7
 800454a:	eb04 0903 	add.w	r9, r4, r3
 800454e:	f000 f863 	bl	8004618 <_sbrk_r>
 8004552:	4581      	cmp	r9, r0
 8004554:	d13f      	bne.n	80045d6 <_malloc_r+0xe6>
 8004556:	6821      	ldr	r1, [r4, #0]
 8004558:	1a6d      	subs	r5, r5, r1
 800455a:	4629      	mov	r1, r5
 800455c:	4638      	mov	r0, r7
 800455e:	f7ff ffa7 	bl	80044b0 <sbrk_aligned>
 8004562:	3001      	adds	r0, #1
 8004564:	d037      	beq.n	80045d6 <_malloc_r+0xe6>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	442b      	add	r3, r5
 800456a:	6023      	str	r3, [r4, #0]
 800456c:	f8d8 3000 	ldr.w	r3, [r8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d038      	beq.n	80045e6 <_malloc_r+0xf6>
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	42a2      	cmp	r2, r4
 8004578:	d12b      	bne.n	80045d2 <_malloc_r+0xe2>
 800457a:	2200      	movs	r2, #0
 800457c:	605a      	str	r2, [r3, #4]
 800457e:	e00f      	b.n	80045a0 <_malloc_r+0xb0>
 8004580:	6822      	ldr	r2, [r4, #0]
 8004582:	1b52      	subs	r2, r2, r5
 8004584:	d41f      	bmi.n	80045c6 <_malloc_r+0xd6>
 8004586:	2a0b      	cmp	r2, #11
 8004588:	d917      	bls.n	80045ba <_malloc_r+0xca>
 800458a:	1961      	adds	r1, r4, r5
 800458c:	42a3      	cmp	r3, r4
 800458e:	6025      	str	r5, [r4, #0]
 8004590:	bf18      	it	ne
 8004592:	6059      	strne	r1, [r3, #4]
 8004594:	6863      	ldr	r3, [r4, #4]
 8004596:	bf08      	it	eq
 8004598:	f8c8 1000 	streq.w	r1, [r8]
 800459c:	5162      	str	r2, [r4, r5]
 800459e:	604b      	str	r3, [r1, #4]
 80045a0:	4638      	mov	r0, r7
 80045a2:	f104 060b 	add.w	r6, r4, #11
 80045a6:	f000 f829 	bl	80045fc <__malloc_unlock>
 80045aa:	f026 0607 	bic.w	r6, r6, #7
 80045ae:	1d23      	adds	r3, r4, #4
 80045b0:	1af2      	subs	r2, r6, r3
 80045b2:	d0ae      	beq.n	8004512 <_malloc_r+0x22>
 80045b4:	1b9b      	subs	r3, r3, r6
 80045b6:	50a3      	str	r3, [r4, r2]
 80045b8:	e7ab      	b.n	8004512 <_malloc_r+0x22>
 80045ba:	42a3      	cmp	r3, r4
 80045bc:	6862      	ldr	r2, [r4, #4]
 80045be:	d1dd      	bne.n	800457c <_malloc_r+0x8c>
 80045c0:	f8c8 2000 	str.w	r2, [r8]
 80045c4:	e7ec      	b.n	80045a0 <_malloc_r+0xb0>
 80045c6:	4623      	mov	r3, r4
 80045c8:	6864      	ldr	r4, [r4, #4]
 80045ca:	e7ac      	b.n	8004526 <_malloc_r+0x36>
 80045cc:	4634      	mov	r4, r6
 80045ce:	6876      	ldr	r6, [r6, #4]
 80045d0:	e7b4      	b.n	800453c <_malloc_r+0x4c>
 80045d2:	4613      	mov	r3, r2
 80045d4:	e7cc      	b.n	8004570 <_malloc_r+0x80>
 80045d6:	230c      	movs	r3, #12
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	4638      	mov	r0, r7
 80045dc:	f000 f80e 	bl	80045fc <__malloc_unlock>
 80045e0:	e797      	b.n	8004512 <_malloc_r+0x22>
 80045e2:	6025      	str	r5, [r4, #0]
 80045e4:	e7dc      	b.n	80045a0 <_malloc_r+0xb0>
 80045e6:	605b      	str	r3, [r3, #4]
 80045e8:	deff      	udf	#255	; 0xff
 80045ea:	bf00      	nop
 80045ec:	20000178 	.word	0x20000178

080045f0 <__malloc_lock>:
 80045f0:	4801      	ldr	r0, [pc, #4]	; (80045f8 <__malloc_lock+0x8>)
 80045f2:	f000 b84b 	b.w	800468c <__retarget_lock_acquire_recursive>
 80045f6:	bf00      	nop
 80045f8:	200002bc 	.word	0x200002bc

080045fc <__malloc_unlock>:
 80045fc:	4801      	ldr	r0, [pc, #4]	; (8004604 <__malloc_unlock+0x8>)
 80045fe:	f000 b846 	b.w	800468e <__retarget_lock_release_recursive>
 8004602:	bf00      	nop
 8004604:	200002bc 	.word	0x200002bc

08004608 <memset>:
 8004608:	4402      	add	r2, r0
 800460a:	4603      	mov	r3, r0
 800460c:	4293      	cmp	r3, r2
 800460e:	d100      	bne.n	8004612 <memset+0xa>
 8004610:	4770      	bx	lr
 8004612:	f803 1b01 	strb.w	r1, [r3], #1
 8004616:	e7f9      	b.n	800460c <memset+0x4>

08004618 <_sbrk_r>:
 8004618:	b538      	push	{r3, r4, r5, lr}
 800461a:	4d06      	ldr	r5, [pc, #24]	; (8004634 <_sbrk_r+0x1c>)
 800461c:	2300      	movs	r3, #0
 800461e:	4604      	mov	r4, r0
 8004620:	4608      	mov	r0, r1
 8004622:	602b      	str	r3, [r5, #0]
 8004624:	f7fc ff58 	bl	80014d8 <_sbrk>
 8004628:	1c43      	adds	r3, r0, #1
 800462a:	d102      	bne.n	8004632 <_sbrk_r+0x1a>
 800462c:	682b      	ldr	r3, [r5, #0]
 800462e:	b103      	cbz	r3, 8004632 <_sbrk_r+0x1a>
 8004630:	6023      	str	r3, [r4, #0]
 8004632:	bd38      	pop	{r3, r4, r5, pc}
 8004634:	200002b8 	.word	0x200002b8

08004638 <__errno>:
 8004638:	4b01      	ldr	r3, [pc, #4]	; (8004640 <__errno+0x8>)
 800463a:	6818      	ldr	r0, [r3, #0]
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	20000068 	.word	0x20000068

08004644 <__libc_init_array>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	4d0d      	ldr	r5, [pc, #52]	; (800467c <__libc_init_array+0x38>)
 8004648:	4c0d      	ldr	r4, [pc, #52]	; (8004680 <__libc_init_array+0x3c>)
 800464a:	1b64      	subs	r4, r4, r5
 800464c:	10a4      	asrs	r4, r4, #2
 800464e:	2600      	movs	r6, #0
 8004650:	42a6      	cmp	r6, r4
 8004652:	d109      	bne.n	8004668 <__libc_init_array+0x24>
 8004654:	4d0b      	ldr	r5, [pc, #44]	; (8004684 <__libc_init_array+0x40>)
 8004656:	4c0c      	ldr	r4, [pc, #48]	; (8004688 <__libc_init_array+0x44>)
 8004658:	f000 f81a 	bl	8004690 <_init>
 800465c:	1b64      	subs	r4, r4, r5
 800465e:	10a4      	asrs	r4, r4, #2
 8004660:	2600      	movs	r6, #0
 8004662:	42a6      	cmp	r6, r4
 8004664:	d105      	bne.n	8004672 <__libc_init_array+0x2e>
 8004666:	bd70      	pop	{r4, r5, r6, pc}
 8004668:	f855 3b04 	ldr.w	r3, [r5], #4
 800466c:	4798      	blx	r3
 800466e:	3601      	adds	r6, #1
 8004670:	e7ee      	b.n	8004650 <__libc_init_array+0xc>
 8004672:	f855 3b04 	ldr.w	r3, [r5], #4
 8004676:	4798      	blx	r3
 8004678:	3601      	adds	r6, #1
 800467a:	e7f2      	b.n	8004662 <__libc_init_array+0x1e>
 800467c:	080047f0 	.word	0x080047f0
 8004680:	080047f0 	.word	0x080047f0
 8004684:	080047f0 	.word	0x080047f0
 8004688:	080047f4 	.word	0x080047f4

0800468c <__retarget_lock_acquire_recursive>:
 800468c:	4770      	bx	lr

0800468e <__retarget_lock_release_recursive>:
 800468e:	4770      	bx	lr

08004690 <_init>:
 8004690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004692:	bf00      	nop
 8004694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004696:	bc08      	pop	{r3}
 8004698:	469e      	mov	lr, r3
 800469a:	4770      	bx	lr

0800469c <_fini>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	bf00      	nop
 80046a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a2:	bc08      	pop	{r3}
 80046a4:	469e      	mov	lr, r3
 80046a6:	4770      	bx	lr
